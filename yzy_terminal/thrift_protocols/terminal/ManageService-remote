#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from terminal import ManageService
from terminal.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  bool ClientLogin(string tokenId, HardwareInfo info)')
    print('  string GetServerConfVer(string tokenId)')
    print('  bool UpdateInfo(string tokenId, ClientInfo info)')
    print('  ClientInfo GetClientInfo(string tokenId)')
    print('  void UpdateCopyDiskProgress(string tokenId, string message)')
    print('  string GetClientNum()')
    print('  string GetClientUser()')
    print('  string GetClientIp()')
    print('  string GetDateTime()')
    print('  bool ExistClientNum(string clientNum)')
    print('  ClientInfo ChangeClient(ClientInfo clientInfo)')
    print('  bool IsFirstLoginUpdatePwd(string username, string pwd)')
    print('  bool UpdateUserPwd(string username, string oldPwd, string pwd)')
    print('  ResultInfo OpenSoft(SoftInfo softInfo)')
    print('  ResultInfo AddSoftInfoList( listSoft)')
    print('   GetSoftInfoList()')
    print('   GetList(i32 pageIndex, i32 pageSize, string keyword, string roomId)')
    print('  bool CanModifyPassword(string userName)')
    print('  bool ValidateUserPassword(string userName, string password)')
    print('  ResultInfo user_login(UserInfo user, string mac)')
    print('  ResultInfo user_logout(string user_session_id)')
    print('  ResultInfo user_modify_passwd(UserInfo old_user, UserInfo new_user)')
    print('   get_dskgrop_info(string mac, string user_session_id)')
    print('   get_desktop_info()')
    print('  RespDesktopInfo desktop_open(DesktopGroupInfo info, string mac, string user_session_id)')
    print('  ResultInfo desktop_close(DesktopInfo info)')
    print('  ResultInfo all_desktop_close(string mac, string user_session_id)')
    print('  i64 get_config_version(string mac)')
    print('  TerminalConf get_config(string mac)')
    print('  ResultInfo update_config(ClientInfo conf)')
    print('  CommandMsg order_query(string mac)')
    print('  bool command_confirm(CommandMsg cmd_msg, string mac)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = ManageService.Client(protocol)
transport.open()

if cmd == 'ClientLogin':
    if len(args) != 2:
        print('ClientLogin requires 2 args')
        sys.exit(1)
    pp.pprint(client.ClientLogin(args[0], eval(args[1]),))

elif cmd == 'GetServerConfVer':
    if len(args) != 1:
        print('GetServerConfVer requires 1 args')
        sys.exit(1)
    pp.pprint(client.GetServerConfVer(args[0],))

elif cmd == 'UpdateInfo':
    if len(args) != 2:
        print('UpdateInfo requires 2 args')
        sys.exit(1)
    pp.pprint(client.UpdateInfo(args[0], eval(args[1]),))

elif cmd == 'GetClientInfo':
    if len(args) != 1:
        print('GetClientInfo requires 1 args')
        sys.exit(1)
    pp.pprint(client.GetClientInfo(args[0],))

elif cmd == 'UpdateCopyDiskProgress':
    if len(args) != 2:
        print('UpdateCopyDiskProgress requires 2 args')
        sys.exit(1)
    pp.pprint(client.UpdateCopyDiskProgress(args[0], args[1],))

elif cmd == 'GetClientNum':
    if len(args) != 0:
        print('GetClientNum requires 0 args')
        sys.exit(1)
    pp.pprint(client.GetClientNum())

elif cmd == 'GetClientUser':
    if len(args) != 0:
        print('GetClientUser requires 0 args')
        sys.exit(1)
    pp.pprint(client.GetClientUser())

elif cmd == 'GetClientIp':
    if len(args) != 0:
        print('GetClientIp requires 0 args')
        sys.exit(1)
    pp.pprint(client.GetClientIp())

elif cmd == 'GetDateTime':
    if len(args) != 0:
        print('GetDateTime requires 0 args')
        sys.exit(1)
    pp.pprint(client.GetDateTime())

elif cmd == 'ExistClientNum':
    if len(args) != 1:
        print('ExistClientNum requires 1 args')
        sys.exit(1)
    pp.pprint(client.ExistClientNum(args[0],))

elif cmd == 'ChangeClient':
    if len(args) != 1:
        print('ChangeClient requires 1 args')
        sys.exit(1)
    pp.pprint(client.ChangeClient(eval(args[0]),))

elif cmd == 'IsFirstLoginUpdatePwd':
    if len(args) != 2:
        print('IsFirstLoginUpdatePwd requires 2 args')
        sys.exit(1)
    pp.pprint(client.IsFirstLoginUpdatePwd(args[0], args[1],))

elif cmd == 'UpdateUserPwd':
    if len(args) != 3:
        print('UpdateUserPwd requires 3 args')
        sys.exit(1)
    pp.pprint(client.UpdateUserPwd(args[0], args[1], args[2],))

elif cmd == 'OpenSoft':
    if len(args) != 1:
        print('OpenSoft requires 1 args')
        sys.exit(1)
    pp.pprint(client.OpenSoft(eval(args[0]),))

elif cmd == 'AddSoftInfoList':
    if len(args) != 1:
        print('AddSoftInfoList requires 1 args')
        sys.exit(1)
    pp.pprint(client.AddSoftInfoList(eval(args[0]),))

elif cmd == 'GetSoftInfoList':
    if len(args) != 0:
        print('GetSoftInfoList requires 0 args')
        sys.exit(1)
    pp.pprint(client.GetSoftInfoList())

elif cmd == 'GetList':
    if len(args) != 4:
        print('GetList requires 4 args')
        sys.exit(1)
    pp.pprint(client.GetList(eval(args[0]), eval(args[1]), args[2], args[3],))

elif cmd == 'CanModifyPassword':
    if len(args) != 1:
        print('CanModifyPassword requires 1 args')
        sys.exit(1)
    pp.pprint(client.CanModifyPassword(args[0],))

elif cmd == 'ValidateUserPassword':
    if len(args) != 2:
        print('ValidateUserPassword requires 2 args')
        sys.exit(1)
    pp.pprint(client.ValidateUserPassword(args[0], args[1],))

elif cmd == 'user_login':
    if len(args) != 2:
        print('user_login requires 2 args')
        sys.exit(1)
    pp.pprint(client.user_login(eval(args[0]), args[1],))

elif cmd == 'user_logout':
    if len(args) != 1:
        print('user_logout requires 1 args')
        sys.exit(1)
    pp.pprint(client.user_logout(args[0],))

elif cmd == 'user_modify_passwd':
    if len(args) != 2:
        print('user_modify_passwd requires 2 args')
        sys.exit(1)
    pp.pprint(client.user_modify_passwd(eval(args[0]), eval(args[1]),))

elif cmd == 'get_dskgrop_info':
    if len(args) != 2:
        print('get_dskgrop_info requires 2 args')
        sys.exit(1)
    pp.pprint(client.get_dskgrop_info(args[0], args[1],))

elif cmd == 'get_desktop_info':
    if len(args) != 0:
        print('get_desktop_info requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_desktop_info())

elif cmd == 'desktop_open':
    if len(args) != 3:
        print('desktop_open requires 3 args')
        sys.exit(1)
    pp.pprint(client.desktop_open(eval(args[0]), args[1], args[2],))

elif cmd == 'desktop_close':
    if len(args) != 1:
        print('desktop_close requires 1 args')
        sys.exit(1)
    pp.pprint(client.desktop_close(eval(args[0]),))

elif cmd == 'all_desktop_close':
    if len(args) != 2:
        print('all_desktop_close requires 2 args')
        sys.exit(1)
    pp.pprint(client.all_desktop_close(args[0], args[1],))

elif cmd == 'get_config_version':
    if len(args) != 1:
        print('get_config_version requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_config_version(args[0],))

elif cmd == 'get_config':
    if len(args) != 1:
        print('get_config requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_config(args[0],))

elif cmd == 'update_config':
    if len(args) != 1:
        print('update_config requires 1 args')
        sys.exit(1)
    pp.pprint(client.update_config(eval(args[0]),))

elif cmd == 'order_query':
    if len(args) != 1:
        print('order_query requires 1 args')
        sys.exit(1)
    pp.pprint(client.order_query(args[0],))

elif cmd == 'command_confirm':
    if len(args) != 2:
        print('command_confirm requires 2 args')
        sys.exit(1)
    pp.pprint(client.command_confirm(eval(args[0]), args[1],))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
