#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class FileType(object):
    LOG = 1
    SOFT = 2
    PATCH = 3

    _VALUES_TO_NAMES = {
        1: "LOG",
        2: "SOFT",
        3: "PATCH",
    }

    _NAMES_TO_VALUES = {
        "LOG": 1,
        "SOFT": 2,
        "PATCH": 3,
    }


class CommandBodyType(object):
    JSON = 1
    XML = 2
    TEXT = 3

    _VALUES_TO_NAMES = {
        1: "JSON",
        2: "XML",
        3: "TEXT",
    }

    _NAMES_TO_VALUES = {
        "JSON": 1,
        "XML": 2,
        "TEXT": 3,
    }


class UserInfo(object):
    """
    Attributes:
     - user_name
     - user_passwd

    """


    def __init__(self, user_name=None, user_passwd=None,):
        self.user_name = user_name
        self.user_passwd = user_passwd

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.user_name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.user_passwd = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('UserInfo')
        if self.user_name is not None:
            oprot.writeFieldBegin('user_name', TType.STRING, 1)
            oprot.writeString(self.user_name.encode('utf-8') if sys.version_info[0] == 2 else self.user_name)
            oprot.writeFieldEnd()
        if self.user_passwd is not None:
            oprot.writeFieldBegin('user_passwd', TType.STRING, 2)
            oprot.writeString(self.user_passwd.encode('utf-8') if sys.version_info[0] == 2 else self.user_passwd)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class IPInfo(object):
    """
    IP信息

    Attributes:
     - IsDhcp
     - Ip
     - Subnet
     - Gateway
     - Mac
     - DNS1
     - DNS2

    """


    def __init__(self, IsDhcp=None, Ip=None, Subnet=None, Gateway=None, Mac=None, DNS1=None, DNS2=None,):
        self.IsDhcp = IsDhcp
        self.Ip = Ip
        self.Subnet = Subnet
        self.Gateway = Gateway
        self.Mac = Mac
        self.DNS1 = DNS1
        self.DNS2 = DNS2

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.IsDhcp = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.Ip = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.Subnet = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.Gateway = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.Mac = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.DNS1 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.DNS2 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('IPInfo')
        if self.IsDhcp is not None:
            oprot.writeFieldBegin('IsDhcp', TType.I32, 1)
            oprot.writeI32(self.IsDhcp)
            oprot.writeFieldEnd()
        if self.Ip is not None:
            oprot.writeFieldBegin('Ip', TType.STRING, 2)
            oprot.writeString(self.Ip.encode('utf-8') if sys.version_info[0] == 2 else self.Ip)
            oprot.writeFieldEnd()
        if self.Subnet is not None:
            oprot.writeFieldBegin('Subnet', TType.STRING, 3)
            oprot.writeString(self.Subnet.encode('utf-8') if sys.version_info[0] == 2 else self.Subnet)
            oprot.writeFieldEnd()
        if self.Gateway is not None:
            oprot.writeFieldBegin('Gateway', TType.STRING, 4)
            oprot.writeString(self.Gateway.encode('utf-8') if sys.version_info[0] == 2 else self.Gateway)
            oprot.writeFieldEnd()
        if self.Mac is not None:
            oprot.writeFieldBegin('Mac', TType.STRING, 5)
            oprot.writeString(self.Mac.encode('utf-8') if sys.version_info[0] == 2 else self.Mac)
            oprot.writeFieldEnd()
        if self.DNS1 is not None:
            oprot.writeFieldBegin('DNS1', TType.STRING, 6)
            oprot.writeString(self.DNS1.encode('utf-8') if sys.version_info[0] == 2 else self.DNS1)
            oprot.writeFieldEnd()
        if self.DNS2 is not None:
            oprot.writeFieldBegin('DNS2', TType.STRING, 7)
            oprot.writeString(self.DNS2.encode('utf-8') if sys.version_info[0] == 2 else self.DNS2)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class DesktopGroupInfo(object):
    """
    Attributes:
     - group_name
     - group_id
     - group_desc
     - group_uuid
     - os_type

    """


    def __init__(self, group_name=None, group_id=None, group_desc=None, group_uuid=None, os_type=None,):
        self.group_name = group_name
        self.group_id = group_id
        self.group_desc = group_desc
        self.group_uuid = group_uuid
        self.os_type = os_type

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.group_name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.group_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.group_desc = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.group_uuid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.os_type = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DesktopGroupInfo')
        if self.group_name is not None:
            oprot.writeFieldBegin('group_name', TType.STRING, 1)
            oprot.writeString(self.group_name.encode('utf-8') if sys.version_info[0] == 2 else self.group_name)
            oprot.writeFieldEnd()
        if self.group_id is not None:
            oprot.writeFieldBegin('group_id', TType.I32, 2)
            oprot.writeI32(self.group_id)
            oprot.writeFieldEnd()
        if self.group_desc is not None:
            oprot.writeFieldBegin('group_desc', TType.STRING, 3)
            oprot.writeString(self.group_desc.encode('utf-8') if sys.version_info[0] == 2 else self.group_desc)
            oprot.writeFieldEnd()
        if self.group_uuid is not None:
            oprot.writeFieldBegin('group_uuid', TType.STRING, 4)
            oprot.writeString(self.group_uuid.encode('utf-8') if sys.version_info[0] == 2 else self.group_uuid)
            oprot.writeFieldEnd()
        if self.os_type is not None:
            oprot.writeFieldBegin('os_type', TType.STRING, 5)
            oprot.writeString(self.os_type.encode('utf-8') if sys.version_info[0] == 2 else self.os_type)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class DesktopInfo(object):
    """
    Attributes:
     - ip
     - port
     - desktop_name
     - token
     - dsk_type
     - group
     - status
     - os_type
     - dsk_user
     - dsk_uuid

    """


    def __init__(self, ip=None, port=None, desktop_name=None, token=None, dsk_type=None, group=None, status=None, os_type=None, dsk_user=None, dsk_uuid=None,):
        self.ip = ip
        self.port = port
        self.desktop_name = desktop_name
        self.token = token
        self.dsk_type = dsk_type
        self.group = group
        self.status = status
        self.os_type = os_type
        self.dsk_user = dsk_user
        self.dsk_uuid = dsk_uuid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.ip = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.desktop_name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.token = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.dsk_type = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.group = DesktopGroupInfo()
                    self.group.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.os_type = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRUCT:
                    self.dsk_user = UserInfo()
                    self.dsk_user.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.dsk_uuid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DesktopInfo')
        if self.ip is not None:
            oprot.writeFieldBegin('ip', TType.STRING, 1)
            oprot.writeString(self.ip.encode('utf-8') if sys.version_info[0] == 2 else self.ip)
            oprot.writeFieldEnd()
        if self.port is not None:
            oprot.writeFieldBegin('port', TType.I32, 2)
            oprot.writeI32(self.port)
            oprot.writeFieldEnd()
        if self.desktop_name is not None:
            oprot.writeFieldBegin('desktop_name', TType.STRING, 3)
            oprot.writeString(self.desktop_name.encode('utf-8') if sys.version_info[0] == 2 else self.desktop_name)
            oprot.writeFieldEnd()
        if self.token is not None:
            oprot.writeFieldBegin('token', TType.STRING, 4)
            oprot.writeString(self.token.encode('utf-8') if sys.version_info[0] == 2 else self.token)
            oprot.writeFieldEnd()
        if self.dsk_type is not None:
            oprot.writeFieldBegin('dsk_type', TType.STRING, 5)
            oprot.writeString(self.dsk_type.encode('utf-8') if sys.version_info[0] == 2 else self.dsk_type)
            oprot.writeFieldEnd()
        if self.group is not None:
            oprot.writeFieldBegin('group', TType.STRUCT, 6)
            self.group.write(oprot)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 7)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.os_type is not None:
            oprot.writeFieldBegin('os_type', TType.STRING, 8)
            oprot.writeString(self.os_type.encode('utf-8') if sys.version_info[0] == 2 else self.os_type)
            oprot.writeFieldEnd()
        if self.dsk_user is not None:
            oprot.writeFieldBegin('dsk_user', TType.STRUCT, 9)
            self.dsk_user.write(oprot)
            oprot.writeFieldEnd()
        if self.dsk_uuid is not None:
            oprot.writeFieldBegin('dsk_uuid', TType.STRING, 10)
            oprot.writeString(self.dsk_uuid.encode('utf-8') if sys.version_info[0] == 2 else self.dsk_uuid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class RespDesktopInfo(object):
    """
    Attributes:
     - code
     - msg
     - description
     - dsk_info

    """


    def __init__(self, code=None, msg=None, description=None, dsk_info=None,):
        self.code = code
        self.msg = msg
        self.description = description
        self.dsk_info = dsk_info

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.code = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.msg = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.description = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.dsk_info = DesktopInfo()
                    self.dsk_info.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('RespDesktopInfo')
        if self.code is not None:
            oprot.writeFieldBegin('code', TType.STRING, 1)
            oprot.writeString(self.code.encode('utf-8') if sys.version_info[0] == 2 else self.code)
            oprot.writeFieldEnd()
        if self.msg is not None:
            oprot.writeFieldBegin('msg', TType.STRING, 2)
            oprot.writeString(self.msg.encode('utf-8') if sys.version_info[0] == 2 else self.msg)
            oprot.writeFieldEnd()
        if self.description is not None:
            oprot.writeFieldBegin('description', TType.STRING, 3)
            oprot.writeString(self.description.encode('utf-8') if sys.version_info[0] == 2 else self.description)
            oprot.writeFieldEnd()
        if self.dsk_info is not None:
            oprot.writeFieldBegin('dsk_info', TType.STRUCT, 4)
            self.dsk_info.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TerminalDesktopInfo(object):
    """
    Attributes:
     - terminal_id
     - terminal_mac
     - terminal_ip
     - desktop_ip

    """


    def __init__(self, terminal_id=None, terminal_mac=None, terminal_ip=None, desktop_ip=None,):
        self.terminal_id = terminal_id
        self.terminal_mac = terminal_mac
        self.terminal_ip = terminal_ip
        self.desktop_ip = desktop_ip

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.terminal_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.terminal_mac = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.terminal_ip = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.desktop_ip = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TerminalDesktopInfo')
        if self.terminal_id is not None:
            oprot.writeFieldBegin('terminal_id', TType.I32, 1)
            oprot.writeI32(self.terminal_id)
            oprot.writeFieldEnd()
        if self.terminal_mac is not None:
            oprot.writeFieldBegin('terminal_mac', TType.STRING, 2)
            oprot.writeString(self.terminal_mac.encode('utf-8') if sys.version_info[0] == 2 else self.terminal_mac)
            oprot.writeFieldEnd()
        if self.terminal_ip is not None:
            oprot.writeFieldBegin('terminal_ip', TType.STRING, 3)
            oprot.writeString(self.terminal_ip.encode('utf-8') if sys.version_info[0] == 2 else self.terminal_ip)
            oprot.writeFieldEnd()
        if self.desktop_ip is not None:
            oprot.writeFieldBegin('desktop_ip', TType.STRING, 4)
            oprot.writeString(self.desktop_ip.encode('utf-8') if sys.version_info[0] == 2 else self.desktop_ip)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class YunServerInfo(object):
    """
    服务器配置信息


    Attributes:
     - ServerUrl
     - ServerUrl1
     - UserName
     - UserPass
     - Domain
     - TimeOut

    """


    def __init__(self, ServerUrl=None, ServerUrl1=None, UserName=None, UserPass=None, Domain=None, TimeOut=None,):
        self.ServerUrl = ServerUrl
        self.ServerUrl1 = ServerUrl1
        self.UserName = UserName
        self.UserPass = UserPass
        self.Domain = Domain
        self.TimeOut = TimeOut

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.ServerUrl = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.ServerUrl1 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.UserName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.UserPass = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.Domain = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.TimeOut = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('YunServerInfo')
        if self.ServerUrl is not None:
            oprot.writeFieldBegin('ServerUrl', TType.STRING, 1)
            oprot.writeString(self.ServerUrl.encode('utf-8') if sys.version_info[0] == 2 else self.ServerUrl)
            oprot.writeFieldEnd()
        if self.ServerUrl1 is not None:
            oprot.writeFieldBegin('ServerUrl1', TType.STRING, 2)
            oprot.writeString(self.ServerUrl1.encode('utf-8') if sys.version_info[0] == 2 else self.ServerUrl1)
            oprot.writeFieldEnd()
        if self.UserName is not None:
            oprot.writeFieldBegin('UserName', TType.STRING, 3)
            oprot.writeString(self.UserName.encode('utf-8') if sys.version_info[0] == 2 else self.UserName)
            oprot.writeFieldEnd()
        if self.UserPass is not None:
            oprot.writeFieldBegin('UserPass', TType.STRING, 4)
            oprot.writeString(self.UserPass.encode('utf-8') if sys.version_info[0] == 2 else self.UserPass)
            oprot.writeFieldEnd()
        if self.Domain is not None:
            oprot.writeFieldBegin('Domain', TType.STRING, 5)
            oprot.writeString(self.Domain.encode('utf-8') if sys.version_info[0] == 2 else self.Domain)
            oprot.writeFieldEnd()
        if self.TimeOut is not None:
            oprot.writeFieldBegin('TimeOut', TType.I64, 6)
            oprot.writeI64(self.TimeOut)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ScreenInfo(object):
    """
    屏幕分辨率

    Attributes:
     - Width
     - Height

    """


    def __init__(self, Width=None, Height=None,):
        self.Width = Width
        self.Height = Height

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.Width = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.Height = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ScreenInfo')
        if self.Width is not None:
            oprot.writeFieldBegin('Width', TType.I32, 1)
            oprot.writeI32(self.Width)
            oprot.writeFieldEnd()
        if self.Height is not None:
            oprot.writeFieldBegin('Height', TType.I32, 2)
            oprot.writeI32(self.Height)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class HardwareInfo(object):
    """
    硬件信息

    Attributes:
     - CpuID
     - HardDiskID
     - MacAddress
     - YunId

    """


    def __init__(self, CpuID=None, HardDiskID=None, MacAddress=None, YunId=None,):
        self.CpuID = CpuID
        self.HardDiskID = HardDiskID
        self.MacAddress = MacAddress
        self.YunId = YunId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.CpuID = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.HardDiskID = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.MacAddress = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.YunId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('HardwareInfo')
        if self.CpuID is not None:
            oprot.writeFieldBegin('CpuID', TType.STRING, 1)
            oprot.writeString(self.CpuID.encode('utf-8') if sys.version_info[0] == 2 else self.CpuID)
            oprot.writeFieldEnd()
        if self.HardDiskID is not None:
            oprot.writeFieldBegin('HardDiskID', TType.STRING, 2)
            oprot.writeString(self.HardDiskID.encode('utf-8') if sys.version_info[0] == 2 else self.HardDiskID)
            oprot.writeFieldEnd()
        if self.MacAddress is not None:
            oprot.writeFieldBegin('MacAddress', TType.STRING, 3)
            oprot.writeString(self.MacAddress.encode('utf-8') if sys.version_info[0] == 2 else self.MacAddress)
            oprot.writeFieldEnd()
        if self.YunId is not None:
            oprot.writeFieldBegin('YunId', TType.STRING, 4)
            oprot.writeString(self.YunId.encode('utf-8') if sys.version_info[0] == 2 else self.YunId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class RoomInfo(object):
    """
    教室信息

    Attributes:
     - RoomId
     - Name
     - Des
     - OrderId
     - SeatNum
     - Group

    """


    def __init__(self, RoomId=None, Name=None, Des=None, OrderId=None, SeatNum=None, Group=None,):
        self.RoomId = RoomId
        self.Name = Name
        self.Des = Des
        self.OrderId = OrderId
        self.SeatNum = SeatNum
        self.Group = Group

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.RoomId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.Name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.Des = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.DOUBLE:
                    self.OrderId = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.SeatNum = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.Group = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('RoomInfo')
        if self.RoomId is not None:
            oprot.writeFieldBegin('RoomId', TType.STRING, 1)
            oprot.writeString(self.RoomId.encode('utf-8') if sys.version_info[0] == 2 else self.RoomId)
            oprot.writeFieldEnd()
        if self.Name is not None:
            oprot.writeFieldBegin('Name', TType.STRING, 2)
            oprot.writeString(self.Name.encode('utf-8') if sys.version_info[0] == 2 else self.Name)
            oprot.writeFieldEnd()
        if self.Des is not None:
            oprot.writeFieldBegin('Des', TType.STRING, 3)
            oprot.writeString(self.Des.encode('utf-8') if sys.version_info[0] == 2 else self.Des)
            oprot.writeFieldEnd()
        if self.OrderId is not None:
            oprot.writeFieldBegin('OrderId', TType.DOUBLE, 4)
            oprot.writeDouble(self.OrderId)
            oprot.writeFieldEnd()
        if self.SeatNum is not None:
            oprot.writeFieldBegin('SeatNum', TType.I32, 5)
            oprot.writeI32(self.SeatNum)
            oprot.writeFieldEnd()
        if self.Group is not None:
            oprot.writeFieldBegin('Group', TType.STRING, 6)
            oprot.writeString(self.Group.encode('utf-8') if sys.version_info[0] == 2 else self.Group)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class RemoteDesktopInfo(object):
    """
    RDP远程桌面信息

    Attributes:
     - MachineName
     - Domain
     - Uername
     - Pwd
     - DesktopName
     - SoftwareInfo
     - Domain0
     - Uername0
     - Pwd0

    """


    def __init__(self, MachineName=None, Domain=None, Uername=None, Pwd=None, DesktopName=None, SoftwareInfo=None, Domain0=None, Uername0=None, Pwd0=None,):
        self.MachineName = MachineName
        self.Domain = Domain
        self.Uername = Uername
        self.Pwd = Pwd
        self.DesktopName = DesktopName
        self.SoftwareInfo = SoftwareInfo
        self.Domain0 = Domain0
        self.Uername0 = Uername0
        self.Pwd0 = Pwd0

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.MachineName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.Domain = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.Uername = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.Pwd = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.DesktopName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.SoftwareInfo = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.Domain0 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.Uername0 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.Pwd0 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('RemoteDesktopInfo')
        if self.MachineName is not None:
            oprot.writeFieldBegin('MachineName', TType.STRING, 1)
            oprot.writeString(self.MachineName.encode('utf-8') if sys.version_info[0] == 2 else self.MachineName)
            oprot.writeFieldEnd()
        if self.Domain is not None:
            oprot.writeFieldBegin('Domain', TType.STRING, 2)
            oprot.writeString(self.Domain.encode('utf-8') if sys.version_info[0] == 2 else self.Domain)
            oprot.writeFieldEnd()
        if self.Uername is not None:
            oprot.writeFieldBegin('Uername', TType.STRING, 3)
            oprot.writeString(self.Uername.encode('utf-8') if sys.version_info[0] == 2 else self.Uername)
            oprot.writeFieldEnd()
        if self.Pwd is not None:
            oprot.writeFieldBegin('Pwd', TType.STRING, 4)
            oprot.writeString(self.Pwd.encode('utf-8') if sys.version_info[0] == 2 else self.Pwd)
            oprot.writeFieldEnd()
        if self.DesktopName is not None:
            oprot.writeFieldBegin('DesktopName', TType.STRING, 5)
            oprot.writeString(self.DesktopName.encode('utf-8') if sys.version_info[0] == 2 else self.DesktopName)
            oprot.writeFieldEnd()
        if self.SoftwareInfo is not None:
            oprot.writeFieldBegin('SoftwareInfo', TType.STRING, 6)
            oprot.writeString(self.SoftwareInfo.encode('utf-8') if sys.version_info[0] == 2 else self.SoftwareInfo)
            oprot.writeFieldEnd()
        if self.Domain0 is not None:
            oprot.writeFieldBegin('Domain0', TType.STRING, 7)
            oprot.writeString(self.Domain0.encode('utf-8') if sys.version_info[0] == 2 else self.Domain0)
            oprot.writeFieldEnd()
        if self.Uername0 is not None:
            oprot.writeFieldBegin('Uername0', TType.STRING, 8)
            oprot.writeString(self.Uername0.encode('utf-8') if sys.version_info[0] == 2 else self.Uername0)
            oprot.writeFieldEnd()
        if self.Pwd0 is not None:
            oprot.writeFieldBegin('Pwd0', TType.STRING, 9)
            oprot.writeString(self.Pwd0.encode('utf-8') if sys.version_info[0] == 2 else self.Pwd0)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ServiceInfo(object):
    """
    Attributes:
     - Ip
     - Port

    """


    def __init__(self, Ip=None, Port=None,):
        self.Ip = Ip
        self.Port = Port

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.Ip = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.Port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ServiceInfo')
        if self.Ip is not None:
            oprot.writeFieldBegin('Ip', TType.STRING, 1)
            oprot.writeString(self.Ip.encode('utf-8') if sys.version_info[0] == 2 else self.Ip)
            oprot.writeFieldEnd()
        if self.Port is not None:
            oprot.writeFieldBegin('Port', TType.I32, 2)
            oprot.writeI32(self.Port)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ScreenBroadCastInfo(object):
    """
    Attributes:
     - CastServicename
     - ScrCastChannel
     - ScrCastIp
     - ScrCastPort
     - ScrCastQuality
     - ScrCastRecvWinStyle
     - ScrCastAllowRecord
     - ScrCastSvrScreenRecord

    """


    def __init__(self, CastServicename=None, ScrCastChannel=None, ScrCastIp=None, ScrCastPort=None, ScrCastQuality=None, ScrCastRecvWinStyle=None, ScrCastAllowRecord=None, ScrCastSvrScreenRecord=None,):
        self.CastServicename = CastServicename
        self.ScrCastChannel = ScrCastChannel
        self.ScrCastIp = ScrCastIp
        self.ScrCastPort = ScrCastPort
        self.ScrCastQuality = ScrCastQuality
        self.ScrCastRecvWinStyle = ScrCastRecvWinStyle
        self.ScrCastAllowRecord = ScrCastAllowRecord
        self.ScrCastSvrScreenRecord = ScrCastSvrScreenRecord

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.CastServicename = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.ScrCastChannel = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.ScrCastIp = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.ScrCastPort = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.ScrCastQuality = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.ScrCastRecvWinStyle = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.ScrCastAllowRecord = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I32:
                    self.ScrCastSvrScreenRecord = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ScreenBroadCastInfo')
        if self.CastServicename is not None:
            oprot.writeFieldBegin('CastServicename', TType.STRING, 1)
            oprot.writeString(self.CastServicename.encode('utf-8') if sys.version_info[0] == 2 else self.CastServicename)
            oprot.writeFieldEnd()
        if self.ScrCastChannel is not None:
            oprot.writeFieldBegin('ScrCastChannel', TType.STRING, 2)
            oprot.writeString(self.ScrCastChannel.encode('utf-8') if sys.version_info[0] == 2 else self.ScrCastChannel)
            oprot.writeFieldEnd()
        if self.ScrCastIp is not None:
            oprot.writeFieldBegin('ScrCastIp', TType.STRING, 3)
            oprot.writeString(self.ScrCastIp.encode('utf-8') if sys.version_info[0] == 2 else self.ScrCastIp)
            oprot.writeFieldEnd()
        if self.ScrCastPort is not None:
            oprot.writeFieldBegin('ScrCastPort', TType.I32, 4)
            oprot.writeI32(self.ScrCastPort)
            oprot.writeFieldEnd()
        if self.ScrCastQuality is not None:
            oprot.writeFieldBegin('ScrCastQuality', TType.I32, 5)
            oprot.writeI32(self.ScrCastQuality)
            oprot.writeFieldEnd()
        if self.ScrCastRecvWinStyle is not None:
            oprot.writeFieldBegin('ScrCastRecvWinStyle', TType.I32, 6)
            oprot.writeI32(self.ScrCastRecvWinStyle)
            oprot.writeFieldEnd()
        if self.ScrCastAllowRecord is not None:
            oprot.writeFieldBegin('ScrCastAllowRecord', TType.I32, 7)
            oprot.writeI32(self.ScrCastAllowRecord)
            oprot.writeFieldEnd()
        if self.ScrCastSvrScreenRecord is not None:
            oprot.writeFieldBegin('ScrCastSvrScreenRecord', TType.I32, 8)
            oprot.writeI32(self.ScrCastSvrScreenRecord)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class VersionInfo(object):
    """
    Attributes:
     - ConfVersion
     - Version

    """


    def __init__(self, ConfVersion=None, Version=None,):
        self.ConfVersion = ConfVersion
        self.Version = Version

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.ConfVersion = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.Version = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('VersionInfo')
        if self.ConfVersion is not None:
            oprot.writeFieldBegin('ConfVersion', TType.STRING, 1)
            oprot.writeString(self.ConfVersion.encode('utf-8') if sys.version_info[0] == 2 else self.ConfVersion)
            oprot.writeFieldEnd()
        if self.Version is not None:
            oprot.writeFieldBegin('Version', TType.STRING, 2)
            oprot.writeString(self.Version.encode('utf-8') if sys.version_info[0] == 2 else self.Version)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SystemTableInfo(object):
    """
    ****************************************************
    多系统切换 add by rock

    Attributes:
     - DesktopId
     - SystemTabUid
     - TabDeskName
     - NeedNums
     - ReadyNums
     - LogonNums
     - IsNeedSign
     - AutoLogin
     - TabDateTime
     - AutoLoginDelaySecond
     - TabIsReady
     - DeskDescription
     - RegisterCount
     - UnRegisterCount
     - OpenCount
     - CloseCount
     - Status
     - StatusName
     - Checked
     - IsClassing
     - IsReady

    """


    def __init__(self, DesktopId=None, SystemTabUid=None, TabDeskName=None, NeedNums=None, ReadyNums=None, LogonNums=None, IsNeedSign=None, AutoLogin=None, TabDateTime=None, AutoLoginDelaySecond=None, TabIsReady=None, DeskDescription=None, RegisterCount=None, UnRegisterCount=None, OpenCount=None, CloseCount=None, Status=None, StatusName=None, Checked=None, IsClassing=None, IsReady=None,):
        self.DesktopId = DesktopId
        self.SystemTabUid = SystemTabUid
        self.TabDeskName = TabDeskName
        self.NeedNums = NeedNums
        self.ReadyNums = ReadyNums
        self.LogonNums = LogonNums
        self.IsNeedSign = IsNeedSign
        self.AutoLogin = AutoLogin
        self.TabDateTime = TabDateTime
        self.AutoLoginDelaySecond = AutoLoginDelaySecond
        self.TabIsReady = TabIsReady
        self.DeskDescription = DeskDescription
        self.RegisterCount = RegisterCount
        self.UnRegisterCount = UnRegisterCount
        self.OpenCount = OpenCount
        self.CloseCount = CloseCount
        self.Status = Status
        self.StatusName = StatusName
        self.Checked = Checked
        self.IsClassing = IsClassing
        self.IsReady = IsReady

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.DesktopId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.SystemTabUid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.TabDeskName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.NeedNums = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.ReadyNums = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.LogonNums = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.BOOL:
                    self.IsNeedSign = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.BOOL:
                    self.AutoLogin = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.TabDateTime = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I64:
                    self.AutoLoginDelaySecond = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.BOOL:
                    self.TabIsReady = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.DeskDescription = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.I32:
                    self.RegisterCount = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.I32:
                    self.UnRegisterCount = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.I32:
                    self.OpenCount = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.I32:
                    self.CloseCount = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.STRING:
                    self.Status = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.STRING:
                    self.StatusName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 19:
                if ftype == TType.BOOL:
                    self.Checked = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.BOOL:
                    self.IsClassing = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.BOOL:
                    self.IsReady = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SystemTableInfo')
        if self.DesktopId is not None:
            oprot.writeFieldBegin('DesktopId', TType.STRING, 1)
            oprot.writeString(self.DesktopId.encode('utf-8') if sys.version_info[0] == 2 else self.DesktopId)
            oprot.writeFieldEnd()
        if self.SystemTabUid is not None:
            oprot.writeFieldBegin('SystemTabUid', TType.STRING, 2)
            oprot.writeString(self.SystemTabUid.encode('utf-8') if sys.version_info[0] == 2 else self.SystemTabUid)
            oprot.writeFieldEnd()
        if self.TabDeskName is not None:
            oprot.writeFieldBegin('TabDeskName', TType.STRING, 3)
            oprot.writeString(self.TabDeskName.encode('utf-8') if sys.version_info[0] == 2 else self.TabDeskName)
            oprot.writeFieldEnd()
        if self.NeedNums is not None:
            oprot.writeFieldBegin('NeedNums', TType.I32, 4)
            oprot.writeI32(self.NeedNums)
            oprot.writeFieldEnd()
        if self.ReadyNums is not None:
            oprot.writeFieldBegin('ReadyNums', TType.I32, 5)
            oprot.writeI32(self.ReadyNums)
            oprot.writeFieldEnd()
        if self.LogonNums is not None:
            oprot.writeFieldBegin('LogonNums', TType.I32, 6)
            oprot.writeI32(self.LogonNums)
            oprot.writeFieldEnd()
        if self.IsNeedSign is not None:
            oprot.writeFieldBegin('IsNeedSign', TType.BOOL, 7)
            oprot.writeBool(self.IsNeedSign)
            oprot.writeFieldEnd()
        if self.AutoLogin is not None:
            oprot.writeFieldBegin('AutoLogin', TType.BOOL, 8)
            oprot.writeBool(self.AutoLogin)
            oprot.writeFieldEnd()
        if self.TabDateTime is not None:
            oprot.writeFieldBegin('TabDateTime', TType.STRING, 9)
            oprot.writeString(self.TabDateTime.encode('utf-8') if sys.version_info[0] == 2 else self.TabDateTime)
            oprot.writeFieldEnd()
        if self.AutoLoginDelaySecond is not None:
            oprot.writeFieldBegin('AutoLoginDelaySecond', TType.I64, 10)
            oprot.writeI64(self.AutoLoginDelaySecond)
            oprot.writeFieldEnd()
        if self.TabIsReady is not None:
            oprot.writeFieldBegin('TabIsReady', TType.BOOL, 11)
            oprot.writeBool(self.TabIsReady)
            oprot.writeFieldEnd()
        if self.DeskDescription is not None:
            oprot.writeFieldBegin('DeskDescription', TType.STRING, 12)
            oprot.writeString(self.DeskDescription.encode('utf-8') if sys.version_info[0] == 2 else self.DeskDescription)
            oprot.writeFieldEnd()
        if self.RegisterCount is not None:
            oprot.writeFieldBegin('RegisterCount', TType.I32, 13)
            oprot.writeI32(self.RegisterCount)
            oprot.writeFieldEnd()
        if self.UnRegisterCount is not None:
            oprot.writeFieldBegin('UnRegisterCount', TType.I32, 14)
            oprot.writeI32(self.UnRegisterCount)
            oprot.writeFieldEnd()
        if self.OpenCount is not None:
            oprot.writeFieldBegin('OpenCount', TType.I32, 15)
            oprot.writeI32(self.OpenCount)
            oprot.writeFieldEnd()
        if self.CloseCount is not None:
            oprot.writeFieldBegin('CloseCount', TType.I32, 16)
            oprot.writeI32(self.CloseCount)
            oprot.writeFieldEnd()
        if self.Status is not None:
            oprot.writeFieldBegin('Status', TType.STRING, 17)
            oprot.writeString(self.Status.encode('utf-8') if sys.version_info[0] == 2 else self.Status)
            oprot.writeFieldEnd()
        if self.StatusName is not None:
            oprot.writeFieldBegin('StatusName', TType.STRING, 18)
            oprot.writeString(self.StatusName.encode('utf-8') if sys.version_info[0] == 2 else self.StatusName)
            oprot.writeFieldEnd()
        if self.Checked is not None:
            oprot.writeFieldBegin('Checked', TType.BOOL, 19)
            oprot.writeBool(self.Checked)
            oprot.writeFieldEnd()
        if self.IsClassing is not None:
            oprot.writeFieldBegin('IsClassing', TType.BOOL, 20)
            oprot.writeBool(self.IsClassing)
            oprot.writeFieldEnd()
        if self.IsReady is not None:
            oprot.writeFieldBegin('IsReady', TType.BOOL, 21)
            oprot.writeBool(self.IsReady)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class EduClientInfo(object):
    """
    Attributes:
     - RoomName
     - Group
     - ProtectPass
     - EduServiceInfo
     - EduTopServiceInfo
     - ClientServiceInfo
     - SlientImagePath
     - FileReceivePath
     - DisEnableNet
     - Slient
     - Casting
     - BroadCastInfo
     - EduVersionInfo
     - UserType
     - PlatForm
     - DemoModing
     - CutClassing
     - SysTableInfo
     - Montioring

    """


    def __init__(self, RoomName=None, Group=None, ProtectPass=None, EduServiceInfo=None, EduTopServiceInfo=None, ClientServiceInfo=None, SlientImagePath=None, FileReceivePath=None, DisEnableNet=None, Slient=None, Casting=None, BroadCastInfo=None, EduVersionInfo=None, UserType=None, PlatForm=None, DemoModing=None, CutClassing=None, SysTableInfo=None, Montioring=None,):
        self.RoomName = RoomName
        self.Group = Group
        self.ProtectPass = ProtectPass
        self.EduServiceInfo = EduServiceInfo
        self.EduTopServiceInfo = EduTopServiceInfo
        self.ClientServiceInfo = ClientServiceInfo
        self.SlientImagePath = SlientImagePath
        self.FileReceivePath = FileReceivePath
        self.DisEnableNet = DisEnableNet
        self.Slient = Slient
        self.Casting = Casting
        self.BroadCastInfo = BroadCastInfo
        self.EduVersionInfo = EduVersionInfo
        self.UserType = UserType
        self.PlatForm = PlatForm
        self.DemoModing = DemoModing
        self.CutClassing = CutClassing
        self.SysTableInfo = SysTableInfo
        self.Montioring = Montioring

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.RoomName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.Group = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.ProtectPass = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.EduServiceInfo = ServiceInfo()
                    self.EduServiceInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.EduTopServiceInfo = ServiceInfo()
                    self.EduTopServiceInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.ClientServiceInfo = ServiceInfo()
                    self.ClientServiceInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.SlientImagePath = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.FileReceivePath = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I32:
                    self.DisEnableNet = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I32:
                    self.Slient = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.I32:
                    self.Casting = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRUCT:
                    self.BroadCastInfo = ScreenBroadCastInfo()
                    self.BroadCastInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRUCT:
                    self.EduVersionInfo = VersionInfo()
                    self.EduVersionInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.I32:
                    self.UserType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.I32:
                    self.PlatForm = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.I32:
                    self.DemoModing = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.I32:
                    self.CutClassing = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.STRUCT:
                    self.SysTableInfo = SystemTableInfo()
                    self.SysTableInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 19:
                if ftype == TType.I32:
                    self.Montioring = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('EduClientInfo')
        if self.RoomName is not None:
            oprot.writeFieldBegin('RoomName', TType.STRING, 1)
            oprot.writeString(self.RoomName.encode('utf-8') if sys.version_info[0] == 2 else self.RoomName)
            oprot.writeFieldEnd()
        if self.Group is not None:
            oprot.writeFieldBegin('Group', TType.STRING, 2)
            oprot.writeString(self.Group.encode('utf-8') if sys.version_info[0] == 2 else self.Group)
            oprot.writeFieldEnd()
        if self.ProtectPass is not None:
            oprot.writeFieldBegin('ProtectPass', TType.STRING, 3)
            oprot.writeString(self.ProtectPass.encode('utf-8') if sys.version_info[0] == 2 else self.ProtectPass)
            oprot.writeFieldEnd()
        if self.EduServiceInfo is not None:
            oprot.writeFieldBegin('EduServiceInfo', TType.STRUCT, 4)
            self.EduServiceInfo.write(oprot)
            oprot.writeFieldEnd()
        if self.EduTopServiceInfo is not None:
            oprot.writeFieldBegin('EduTopServiceInfo', TType.STRUCT, 5)
            self.EduTopServiceInfo.write(oprot)
            oprot.writeFieldEnd()
        if self.ClientServiceInfo is not None:
            oprot.writeFieldBegin('ClientServiceInfo', TType.STRUCT, 6)
            self.ClientServiceInfo.write(oprot)
            oprot.writeFieldEnd()
        if self.SlientImagePath is not None:
            oprot.writeFieldBegin('SlientImagePath', TType.STRING, 7)
            oprot.writeString(self.SlientImagePath.encode('utf-8') if sys.version_info[0] == 2 else self.SlientImagePath)
            oprot.writeFieldEnd()
        if self.FileReceivePath is not None:
            oprot.writeFieldBegin('FileReceivePath', TType.STRING, 8)
            oprot.writeString(self.FileReceivePath.encode('utf-8') if sys.version_info[0] == 2 else self.FileReceivePath)
            oprot.writeFieldEnd()
        if self.DisEnableNet is not None:
            oprot.writeFieldBegin('DisEnableNet', TType.I32, 9)
            oprot.writeI32(self.DisEnableNet)
            oprot.writeFieldEnd()
        if self.Slient is not None:
            oprot.writeFieldBegin('Slient', TType.I32, 10)
            oprot.writeI32(self.Slient)
            oprot.writeFieldEnd()
        if self.Casting is not None:
            oprot.writeFieldBegin('Casting', TType.I32, 11)
            oprot.writeI32(self.Casting)
            oprot.writeFieldEnd()
        if self.BroadCastInfo is not None:
            oprot.writeFieldBegin('BroadCastInfo', TType.STRUCT, 12)
            self.BroadCastInfo.write(oprot)
            oprot.writeFieldEnd()
        if self.EduVersionInfo is not None:
            oprot.writeFieldBegin('EduVersionInfo', TType.STRUCT, 13)
            self.EduVersionInfo.write(oprot)
            oprot.writeFieldEnd()
        if self.UserType is not None:
            oprot.writeFieldBegin('UserType', TType.I32, 14)
            oprot.writeI32(self.UserType)
            oprot.writeFieldEnd()
        if self.PlatForm is not None:
            oprot.writeFieldBegin('PlatForm', TType.I32, 15)
            oprot.writeI32(self.PlatForm)
            oprot.writeFieldEnd()
        if self.DemoModing is not None:
            oprot.writeFieldBegin('DemoModing', TType.I32, 16)
            oprot.writeI32(self.DemoModing)
            oprot.writeFieldEnd()
        if self.CutClassing is not None:
            oprot.writeFieldBegin('CutClassing', TType.I32, 17)
            oprot.writeI32(self.CutClassing)
            oprot.writeFieldEnd()
        if self.SysTableInfo is not None:
            oprot.writeFieldBegin('SysTableInfo', TType.STRUCT, 18)
            self.SysTableInfo.write(oprot)
            oprot.writeFieldEnd()
        if self.Montioring is not None:
            oprot.writeFieldBegin('Montioring', TType.I32, 19)
            oprot.writeI32(self.Montioring)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SitInfo(object):
    """
    座位信息

    Attributes:
     - Row
     - Col
     - RowId
     - Des
     - UserUuid
     - RoomId

    """


    def __init__(self, Row=None, Col=None, RowId=None, Des=None, UserUuid=None, RoomId=None,):
        self.Row = Row
        self.Col = Col
        self.RowId = RowId
        self.Des = Des
        self.UserUuid = UserUuid
        self.RoomId = RoomId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.Row = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.Col = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.RowId = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.Des = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.UserUuid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.RoomId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SitInfo')
        if self.Row is not None:
            oprot.writeFieldBegin('Row', TType.I32, 1)
            oprot.writeI32(self.Row)
            oprot.writeFieldEnd()
        if self.Col is not None:
            oprot.writeFieldBegin('Col', TType.I32, 2)
            oprot.writeI32(self.Col)
            oprot.writeFieldEnd()
        if self.RowId is not None:
            oprot.writeFieldBegin('RowId', TType.DOUBLE, 3)
            oprot.writeDouble(self.RowId)
            oprot.writeFieldEnd()
        if self.Des is not None:
            oprot.writeFieldBegin('Des', TType.STRING, 4)
            oprot.writeString(self.Des.encode('utf-8') if sys.version_info[0] == 2 else self.Des)
            oprot.writeFieldEnd()
        if self.UserUuid is not None:
            oprot.writeFieldBegin('UserUuid', TType.STRING, 5)
            oprot.writeString(self.UserUuid.encode('utf-8') if sys.version_info[0] == 2 else self.UserUuid)
            oprot.writeFieldEnd()
        if self.RoomId is not None:
            oprot.writeFieldBegin('RoomId', TType.STRING, 6)
            oprot.writeString(self.RoomId.encode('utf-8') if sys.version_info[0] == 2 else self.RoomId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ClientInfo(object):
    """
    客户端配置信息

    Attributes:
     - Num
     - HostName
     - IPinfo
     - Yuninfo
     - Screeninfo
     - ShowLocalDesktop
     - AutoOpen
     - ConfigPass
     - MachineCode
     - ActivateCode
     - Activatestate
     - Ewfstate
     - version
     - ConfVersion
     - ConfTime
     - OverTime
     - HardInfo
     - ShowLoginPage
     - ShowDesktopBootForm
     - ShowDesktopDesc
     - roomoInfo
     - LocalPass
     - IdleTimeOut
     - CloseWhileExitYunDesk
     - remoteDesktopInfo
     - usertype
     - PlatForm
     - EduInfo
     - ClientSitInfo
     - TerminalConfInfo

    """


    def __init__(self, Num=None, HostName=None, IPinfo=None, Yuninfo=None, Screeninfo=None, ShowLocalDesktop=None, AutoOpen=None, ConfigPass=None, MachineCode=None, ActivateCode=None, Activatestate=None, Ewfstate=None, version=None, ConfVersion=None, ConfTime=None, OverTime=None, HardInfo=None, ShowLoginPage=None, ShowDesktopBootForm=None, ShowDesktopDesc=None, roomoInfo=None, LocalPass=None, IdleTimeOut=None, CloseWhileExitYunDesk=None, remoteDesktopInfo=None, usertype=None, PlatForm=None, EduInfo=None, ClientSitInfo=None, TerminalConfInfo=None,):
        self.Num = Num
        self.HostName = HostName
        self.IPinfo = IPinfo
        self.Yuninfo = Yuninfo
        self.Screeninfo = Screeninfo
        self.ShowLocalDesktop = ShowLocalDesktop
        self.AutoOpen = AutoOpen
        self.ConfigPass = ConfigPass
        self.MachineCode = MachineCode
        self.ActivateCode = ActivateCode
        self.Activatestate = Activatestate
        self.Ewfstate = Ewfstate
        self.version = version
        self.ConfVersion = ConfVersion
        self.ConfTime = ConfTime
        self.OverTime = OverTime
        self.HardInfo = HardInfo
        self.ShowLoginPage = ShowLoginPage
        self.ShowDesktopBootForm = ShowDesktopBootForm
        self.ShowDesktopDesc = ShowDesktopDesc
        self.roomoInfo = roomoInfo
        self.LocalPass = LocalPass
        self.IdleTimeOut = IdleTimeOut
        self.CloseWhileExitYunDesk = CloseWhileExitYunDesk
        self.remoteDesktopInfo = remoteDesktopInfo
        self.usertype = usertype
        self.PlatForm = PlatForm
        self.EduInfo = EduInfo
        self.ClientSitInfo = ClientSitInfo
        self.TerminalConfInfo = TerminalConfInfo

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.Num = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.HostName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.IPinfo = IPInfo()
                    self.IPinfo.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.Yuninfo = YunServerInfo()
                    self.Yuninfo.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.Screeninfo = ScreenInfo()
                    self.Screeninfo.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.ShowLocalDesktop = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.AutoOpen = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.ConfigPass = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.MachineCode = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.ActivateCode = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.Activatestate = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRING:
                    self.Ewfstate = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.STRING:
                    self.version = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.STRING:
                    self.ConfVersion = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.I64:
                    self.ConfTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.I64:
                    self.OverTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.STRUCT:
                    self.HardInfo = HardwareInfo()
                    self.HardInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 19:
                if ftype == TType.I32:
                    self.ShowLoginPage = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.I32:
                    self.ShowDesktopBootForm = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.I32:
                    self.ShowDesktopDesc = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 22:
                if ftype == TType.STRUCT:
                    self.roomoInfo = RoomInfo()
                    self.roomoInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 23:
                if ftype == TType.STRING:
                    self.LocalPass = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 24:
                if ftype == TType.I32:
                    self.IdleTimeOut = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 25:
                if ftype == TType.I32:
                    self.CloseWhileExitYunDesk = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 26:
                if ftype == TType.STRUCT:
                    self.remoteDesktopInfo = RemoteDesktopInfo()
                    self.remoteDesktopInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 27:
                if ftype == TType.I32:
                    self.usertype = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 28:
                if ftype == TType.I32:
                    self.PlatForm = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 29:
                if ftype == TType.STRUCT:
                    self.EduInfo = EduClientInfo()
                    self.EduInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 30:
                if ftype == TType.STRUCT:
                    self.ClientSitInfo = SitInfo()
                    self.ClientSitInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 31:
                if ftype == TType.STRUCT:
                    self.TerminalConfInfo = TerminalConf()
                    self.TerminalConfInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ClientInfo')
        if self.Num is not None:
            oprot.writeFieldBegin('Num', TType.STRING, 1)
            oprot.writeString(self.Num.encode('utf-8') if sys.version_info[0] == 2 else self.Num)
            oprot.writeFieldEnd()
        if self.HostName is not None:
            oprot.writeFieldBegin('HostName', TType.STRING, 2)
            oprot.writeString(self.HostName.encode('utf-8') if sys.version_info[0] == 2 else self.HostName)
            oprot.writeFieldEnd()
        if self.IPinfo is not None:
            oprot.writeFieldBegin('IPinfo', TType.STRUCT, 3)
            self.IPinfo.write(oprot)
            oprot.writeFieldEnd()
        if self.Yuninfo is not None:
            oprot.writeFieldBegin('Yuninfo', TType.STRUCT, 4)
            self.Yuninfo.write(oprot)
            oprot.writeFieldEnd()
        if self.Screeninfo is not None:
            oprot.writeFieldBegin('Screeninfo', TType.STRUCT, 6)
            self.Screeninfo.write(oprot)
            oprot.writeFieldEnd()
        if self.ShowLocalDesktop is not None:
            oprot.writeFieldBegin('ShowLocalDesktop', TType.I32, 7)
            oprot.writeI32(self.ShowLocalDesktop)
            oprot.writeFieldEnd()
        if self.AutoOpen is not None:
            oprot.writeFieldBegin('AutoOpen', TType.STRING, 8)
            oprot.writeString(self.AutoOpen.encode('utf-8') if sys.version_info[0] == 2 else self.AutoOpen)
            oprot.writeFieldEnd()
        if self.ConfigPass is not None:
            oprot.writeFieldBegin('ConfigPass', TType.STRING, 9)
            oprot.writeString(self.ConfigPass.encode('utf-8') if sys.version_info[0] == 2 else self.ConfigPass)
            oprot.writeFieldEnd()
        if self.MachineCode is not None:
            oprot.writeFieldBegin('MachineCode', TType.STRING, 10)
            oprot.writeString(self.MachineCode.encode('utf-8') if sys.version_info[0] == 2 else self.MachineCode)
            oprot.writeFieldEnd()
        if self.ActivateCode is not None:
            oprot.writeFieldBegin('ActivateCode', TType.STRING, 11)
            oprot.writeString(self.ActivateCode.encode('utf-8') if sys.version_info[0] == 2 else self.ActivateCode)
            oprot.writeFieldEnd()
        if self.Activatestate is not None:
            oprot.writeFieldBegin('Activatestate', TType.STRING, 12)
            oprot.writeString(self.Activatestate.encode('utf-8') if sys.version_info[0] == 2 else self.Activatestate)
            oprot.writeFieldEnd()
        if self.Ewfstate is not None:
            oprot.writeFieldBegin('Ewfstate', TType.STRING, 13)
            oprot.writeString(self.Ewfstate.encode('utf-8') if sys.version_info[0] == 2 else self.Ewfstate)
            oprot.writeFieldEnd()
        if self.version is not None:
            oprot.writeFieldBegin('version', TType.STRING, 14)
            oprot.writeString(self.version.encode('utf-8') if sys.version_info[0] == 2 else self.version)
            oprot.writeFieldEnd()
        if self.ConfVersion is not None:
            oprot.writeFieldBegin('ConfVersion', TType.STRING, 15)
            oprot.writeString(self.ConfVersion.encode('utf-8') if sys.version_info[0] == 2 else self.ConfVersion)
            oprot.writeFieldEnd()
        if self.ConfTime is not None:
            oprot.writeFieldBegin('ConfTime', TType.I64, 16)
            oprot.writeI64(self.ConfTime)
            oprot.writeFieldEnd()
        if self.OverTime is not None:
            oprot.writeFieldBegin('OverTime', TType.I64, 17)
            oprot.writeI64(self.OverTime)
            oprot.writeFieldEnd()
        if self.HardInfo is not None:
            oprot.writeFieldBegin('HardInfo', TType.STRUCT, 18)
            self.HardInfo.write(oprot)
            oprot.writeFieldEnd()
        if self.ShowLoginPage is not None:
            oprot.writeFieldBegin('ShowLoginPage', TType.I32, 19)
            oprot.writeI32(self.ShowLoginPage)
            oprot.writeFieldEnd()
        if self.ShowDesktopBootForm is not None:
            oprot.writeFieldBegin('ShowDesktopBootForm', TType.I32, 20)
            oprot.writeI32(self.ShowDesktopBootForm)
            oprot.writeFieldEnd()
        if self.ShowDesktopDesc is not None:
            oprot.writeFieldBegin('ShowDesktopDesc', TType.I32, 21)
            oprot.writeI32(self.ShowDesktopDesc)
            oprot.writeFieldEnd()
        if self.roomoInfo is not None:
            oprot.writeFieldBegin('roomoInfo', TType.STRUCT, 22)
            self.roomoInfo.write(oprot)
            oprot.writeFieldEnd()
        if self.LocalPass is not None:
            oprot.writeFieldBegin('LocalPass', TType.STRING, 23)
            oprot.writeString(self.LocalPass.encode('utf-8') if sys.version_info[0] == 2 else self.LocalPass)
            oprot.writeFieldEnd()
        if self.IdleTimeOut is not None:
            oprot.writeFieldBegin('IdleTimeOut', TType.I32, 24)
            oprot.writeI32(self.IdleTimeOut)
            oprot.writeFieldEnd()
        if self.CloseWhileExitYunDesk is not None:
            oprot.writeFieldBegin('CloseWhileExitYunDesk', TType.I32, 25)
            oprot.writeI32(self.CloseWhileExitYunDesk)
            oprot.writeFieldEnd()
        if self.remoteDesktopInfo is not None:
            oprot.writeFieldBegin('remoteDesktopInfo', TType.STRUCT, 26)
            self.remoteDesktopInfo.write(oprot)
            oprot.writeFieldEnd()
        if self.usertype is not None:
            oprot.writeFieldBegin('usertype', TType.I32, 27)
            oprot.writeI32(self.usertype)
            oprot.writeFieldEnd()
        if self.PlatForm is not None:
            oprot.writeFieldBegin('PlatForm', TType.I32, 28)
            oprot.writeI32(self.PlatForm)
            oprot.writeFieldEnd()
        if self.EduInfo is not None:
            oprot.writeFieldBegin('EduInfo', TType.STRUCT, 29)
            self.EduInfo.write(oprot)
            oprot.writeFieldEnd()
        if self.ClientSitInfo is not None:
            oprot.writeFieldBegin('ClientSitInfo', TType.STRUCT, 30)
            self.ClientSitInfo.write(oprot)
            oprot.writeFieldEnd()
        if self.TerminalConfInfo is not None:
            oprot.writeFieldBegin('TerminalConfInfo', TType.STRUCT, 31)
            self.TerminalConfInfo.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class DisconnectSetup(object):
    """
    KVM 终端配置

    Attributes:
     - goto_local_desktop
     - goto_local_auth

    """


    def __init__(self, goto_local_desktop=None, goto_local_auth=None,):
        self.goto_local_desktop = goto_local_desktop
        self.goto_local_auth = goto_local_auth

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.goto_local_desktop = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.goto_local_auth = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DisconnectSetup')
        if self.goto_local_desktop is not None:
            oprot.writeFieldBegin('goto_local_desktop', TType.I32, 1)
            oprot.writeI32(self.goto_local_desktop)
            oprot.writeFieldEnd()
        if self.goto_local_auth is not None:
            oprot.writeFieldBegin('goto_local_auth', TType.BOOL, 2)
            oprot.writeBool(self.goto_local_auth)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class DisplaySetup(object):
    """
    Attributes:
     - show_local_button
     - goto_local_passwd

    """


    def __init__(self, show_local_button=None, goto_local_passwd=None,):
        self.show_local_button = show_local_button
        self.goto_local_passwd = goto_local_passwd

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.show_local_button = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.goto_local_passwd = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DisplaySetup')
        if self.show_local_button is not None:
            oprot.writeFieldBegin('show_local_button', TType.BOOL, 1)
            oprot.writeBool(self.show_local_button)
            oprot.writeFieldEnd()
        if self.goto_local_passwd is not None:
            oprot.writeFieldBegin('goto_local_passwd', TType.STRING, 2)
            oprot.writeString(self.goto_local_passwd.encode('utf-8') if sys.version_info[0] == 2 else self.goto_local_passwd)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TerminalConf(object):
    """
    Attributes:
     - terminal_id
     - mac
     - ip_info
     - terminal_name
     - platform
     - soft_version
     - show_desktop_type
     - auto_desktop
     - close_desktop_strategy
     - close_terminal_strategy
     - open_strategy
     - server_info
     - screen_info_list
     - current_screen_info
     - show_modify_user_passwd
     - terminal_setup_passwd
     - conf_version
     - window_mode
     - disconnect_setup
     - show
     - hide_tools
     - top_level_service_ip
     - teacher_service_ip
     - classroom_num
     - multicast_ip
     - multicast_port

    """


    def __init__(self, terminal_id=None, mac=None, ip_info=None, terminal_name=None, platform=None, soft_version=None, show_desktop_type=None, auto_desktop=None, close_desktop_strategy=None, close_terminal_strategy=None, open_strategy=None, server_info=None, screen_info_list=None, current_screen_info=None, show_modify_user_passwd=None, terminal_setup_passwd=None, conf_version=None, window_mode=None, disconnect_setup=None, show=None, hide_tools=None, top_level_service_ip=None, teacher_service_ip=None, classroom_num=None, multicast_ip=None, multicast_port=None,):
        self.terminal_id = terminal_id
        self.mac = mac
        self.ip_info = ip_info
        self.terminal_name = terminal_name
        self.platform = platform
        self.soft_version = soft_version
        self.show_desktop_type = show_desktop_type
        self.auto_desktop = auto_desktop
        self.close_desktop_strategy = close_desktop_strategy
        self.close_terminal_strategy = close_terminal_strategy
        self.open_strategy = open_strategy
        self.server_info = server_info
        self.screen_info_list = screen_info_list
        self.current_screen_info = current_screen_info
        self.show_modify_user_passwd = show_modify_user_passwd
        self.terminal_setup_passwd = terminal_setup_passwd
        self.conf_version = conf_version
        self.window_mode = window_mode
        self.disconnect_setup = disconnect_setup
        self.show = show
        self.hide_tools = hide_tools
        self.top_level_service_ip = top_level_service_ip
        self.teacher_service_ip = teacher_service_ip
        self.classroom_num = classroom_num
        self.multicast_ip = multicast_ip
        self.multicast_port = multicast_port

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.terminal_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.mac = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.ip_info = IPInfo()
                    self.ip_info.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.terminal_name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.platform = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.soft_version = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.show_desktop_type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I32:
                    self.auto_desktop = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.BOOL:
                    self.close_desktop_strategy = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.BOOL:
                    self.close_terminal_strategy = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.BOOL:
                    self.open_strategy = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRUCT:
                    self.server_info = ServiceInfo()
                    self.server_info.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.LIST:
                    self.screen_info_list = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = ScreenInfo()
                        _elem5.read(iprot)
                        self.screen_info_list.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.STRUCT:
                    self.current_screen_info = ScreenInfo()
                    self.current_screen_info.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.BOOL:
                    self.show_modify_user_passwd = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.STRING:
                    self.terminal_setup_passwd = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.I64:
                    self.conf_version = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.I32:
                    self.window_mode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 19:
                if ftype == TType.STRUCT:
                    self.disconnect_setup = DisconnectSetup()
                    self.disconnect_setup.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.STRUCT:
                    self.show = DisplaySetup()
                    self.show.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.BOOL:
                    self.hide_tools = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 22:
                if ftype == TType.STRING:
                    self.top_level_service_ip = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 23:
                if ftype == TType.STRING:
                    self.teacher_service_ip = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 24:
                if ftype == TType.I32:
                    self.classroom_num = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 25:
                if ftype == TType.STRING:
                    self.multicast_ip = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 26:
                if ftype == TType.I32:
                    self.multicast_port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TerminalConf')
        if self.terminal_id is not None:
            oprot.writeFieldBegin('terminal_id', TType.I32, 1)
            oprot.writeI32(self.terminal_id)
            oprot.writeFieldEnd()
        if self.mac is not None:
            oprot.writeFieldBegin('mac', TType.STRING, 2)
            oprot.writeString(self.mac.encode('utf-8') if sys.version_info[0] == 2 else self.mac)
            oprot.writeFieldEnd()
        if self.ip_info is not None:
            oprot.writeFieldBegin('ip_info', TType.STRUCT, 3)
            self.ip_info.write(oprot)
            oprot.writeFieldEnd()
        if self.terminal_name is not None:
            oprot.writeFieldBegin('terminal_name', TType.STRING, 4)
            oprot.writeString(self.terminal_name.encode('utf-8') if sys.version_info[0] == 2 else self.terminal_name)
            oprot.writeFieldEnd()
        if self.platform is not None:
            oprot.writeFieldBegin('platform', TType.STRING, 5)
            oprot.writeString(self.platform.encode('utf-8') if sys.version_info[0] == 2 else self.platform)
            oprot.writeFieldEnd()
        if self.soft_version is not None:
            oprot.writeFieldBegin('soft_version', TType.STRING, 6)
            oprot.writeString(self.soft_version.encode('utf-8') if sys.version_info[0] == 2 else self.soft_version)
            oprot.writeFieldEnd()
        if self.show_desktop_type is not None:
            oprot.writeFieldBegin('show_desktop_type', TType.I32, 7)
            oprot.writeI32(self.show_desktop_type)
            oprot.writeFieldEnd()
        if self.auto_desktop is not None:
            oprot.writeFieldBegin('auto_desktop', TType.I32, 8)
            oprot.writeI32(self.auto_desktop)
            oprot.writeFieldEnd()
        if self.close_desktop_strategy is not None:
            oprot.writeFieldBegin('close_desktop_strategy', TType.BOOL, 9)
            oprot.writeBool(self.close_desktop_strategy)
            oprot.writeFieldEnd()
        if self.close_terminal_strategy is not None:
            oprot.writeFieldBegin('close_terminal_strategy', TType.BOOL, 10)
            oprot.writeBool(self.close_terminal_strategy)
            oprot.writeFieldEnd()
        if self.open_strategy is not None:
            oprot.writeFieldBegin('open_strategy', TType.BOOL, 11)
            oprot.writeBool(self.open_strategy)
            oprot.writeFieldEnd()
        if self.server_info is not None:
            oprot.writeFieldBegin('server_info', TType.STRUCT, 12)
            self.server_info.write(oprot)
            oprot.writeFieldEnd()
        if self.screen_info_list is not None:
            oprot.writeFieldBegin('screen_info_list', TType.LIST, 13)
            oprot.writeListBegin(TType.STRUCT, len(self.screen_info_list))
            for iter6 in self.screen_info_list:
                iter6.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.current_screen_info is not None:
            oprot.writeFieldBegin('current_screen_info', TType.STRUCT, 14)
            self.current_screen_info.write(oprot)
            oprot.writeFieldEnd()
        if self.show_modify_user_passwd is not None:
            oprot.writeFieldBegin('show_modify_user_passwd', TType.BOOL, 15)
            oprot.writeBool(self.show_modify_user_passwd)
            oprot.writeFieldEnd()
        if self.terminal_setup_passwd is not None:
            oprot.writeFieldBegin('terminal_setup_passwd', TType.STRING, 16)
            oprot.writeString(self.terminal_setup_passwd.encode('utf-8') if sys.version_info[0] == 2 else self.terminal_setup_passwd)
            oprot.writeFieldEnd()
        if self.conf_version is not None:
            oprot.writeFieldBegin('conf_version', TType.I64, 17)
            oprot.writeI64(self.conf_version)
            oprot.writeFieldEnd()
        if self.window_mode is not None:
            oprot.writeFieldBegin('window_mode', TType.I32, 18)
            oprot.writeI32(self.window_mode)
            oprot.writeFieldEnd()
        if self.disconnect_setup is not None:
            oprot.writeFieldBegin('disconnect_setup', TType.STRUCT, 19)
            self.disconnect_setup.write(oprot)
            oprot.writeFieldEnd()
        if self.show is not None:
            oprot.writeFieldBegin('show', TType.STRUCT, 20)
            self.show.write(oprot)
            oprot.writeFieldEnd()
        if self.hide_tools is not None:
            oprot.writeFieldBegin('hide_tools', TType.BOOL, 21)
            oprot.writeBool(self.hide_tools)
            oprot.writeFieldEnd()
        if self.top_level_service_ip is not None:
            oprot.writeFieldBegin('top_level_service_ip', TType.STRING, 22)
            oprot.writeString(self.top_level_service_ip.encode('utf-8') if sys.version_info[0] == 2 else self.top_level_service_ip)
            oprot.writeFieldEnd()
        if self.teacher_service_ip is not None:
            oprot.writeFieldBegin('teacher_service_ip', TType.STRING, 23)
            oprot.writeString(self.teacher_service_ip.encode('utf-8') if sys.version_info[0] == 2 else self.teacher_service_ip)
            oprot.writeFieldEnd()
        if self.classroom_num is not None:
            oprot.writeFieldBegin('classroom_num', TType.I32, 24)
            oprot.writeI32(self.classroom_num)
            oprot.writeFieldEnd()
        if self.multicast_ip is not None:
            oprot.writeFieldBegin('multicast_ip', TType.STRING, 25)
            oprot.writeString(self.multicast_ip.encode('utf-8') if sys.version_info[0] == 2 else self.multicast_ip)
            oprot.writeFieldEnd()
        if self.multicast_port is not None:
            oprot.writeFieldBegin('multicast_port', TType.I32, 26)
            oprot.writeI32(self.multicast_port)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class FileCtrlInfo(object):
    """
    Attributes:
     - file_name
     - file_type
     - total_size
     - operate_offset
     - operate_length

    """


    def __init__(self, file_name=None, file_type=None, total_size=None, operate_offset=None, operate_length=None,):
        self.file_name = file_name
        self.file_type = file_type
        self.total_size = total_size
        self.operate_offset = operate_offset
        self.operate_length = operate_length

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.file_name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.file_type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.total_size = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.operate_offset = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.operate_length = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('FileCtrlInfo')
        if self.file_name is not None:
            oprot.writeFieldBegin('file_name', TType.STRING, 1)
            oprot.writeString(self.file_name.encode('utf-8') if sys.version_info[0] == 2 else self.file_name)
            oprot.writeFieldEnd()
        if self.file_type is not None:
            oprot.writeFieldBegin('file_type', TType.I32, 2)
            oprot.writeI32(self.file_type)
            oprot.writeFieldEnd()
        if self.total_size is not None:
            oprot.writeFieldBegin('total_size', TType.I64, 3)
            oprot.writeI64(self.total_size)
            oprot.writeFieldEnd()
        if self.operate_offset is not None:
            oprot.writeFieldBegin('operate_offset', TType.I64, 4)
            oprot.writeI64(self.operate_offset)
            oprot.writeFieldEnd()
        if self.operate_length is not None:
            oprot.writeFieldBegin('operate_length', TType.I32, 5)
            oprot.writeI32(self.operate_length)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class RouteInfo(object):
    """
    Attributes:
     - RouteId
     - RouteAddress
     - IPinfo

    """


    def __init__(self, RouteId=None, RouteAddress=None, IPinfo=None,):
        self.RouteId = RouteId
        self.RouteAddress = RouteAddress
        self.IPinfo = IPinfo

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.RouteId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.RouteAddress = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.IPinfo = IPInfo()
                    self.IPinfo.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('RouteInfo')
        if self.RouteId is not None:
            oprot.writeFieldBegin('RouteId', TType.STRING, 1)
            oprot.writeString(self.RouteId.encode('utf-8') if sys.version_info[0] == 2 else self.RouteId)
            oprot.writeFieldEnd()
        if self.RouteAddress is not None:
            oprot.writeFieldBegin('RouteAddress', TType.STRING, 2)
            oprot.writeString(self.RouteAddress.encode('utf-8') if sys.version_info[0] == 2 else self.RouteAddress)
            oprot.writeFieldEnd()
        if self.IPinfo is not None:
            oprot.writeFieldBegin('IPinfo', TType.STRUCT, 3)
            self.IPinfo.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ResultInfo(object):
    """
    结果信息

    Attributes:
     - code
     - Message
     - Description

    """


    def __init__(self, code=None, Message=None, Description=None,):
        self.code = code
        self.Message = Message
        self.Description = Description

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.code = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.Message = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.Description = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ResultInfo')
        if self.code is not None:
            oprot.writeFieldBegin('code', TType.STRING, 1)
            oprot.writeString(self.code.encode('utf-8') if sys.version_info[0] == 2 else self.code)
            oprot.writeFieldEnd()
        if self.Message is not None:
            oprot.writeFieldBegin('Message', TType.STRING, 2)
            oprot.writeString(self.Message.encode('utf-8') if sys.version_info[0] == 2 else self.Message)
            oprot.writeFieldEnd()
        if self.Description is not None:
            oprot.writeFieldBegin('Description', TType.STRING, 3)
            oprot.writeString(self.Description.encode('utf-8') if sys.version_info[0] == 2 else self.Description)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SoftInfo(object):
    """
    云桌面运行软件信息

    Attributes:
     - ProcessName
     - ClassName
     - DefaultTitle
     - ProcessPath
     - Username
     - ImgData

    """


    def __init__(self, ProcessName=None, ClassName=None, DefaultTitle=None, ProcessPath=None, Username=None, ImgData=None,):
        self.ProcessName = ProcessName
        self.ClassName = ClassName
        self.DefaultTitle = DefaultTitle
        self.ProcessPath = ProcessPath
        self.Username = Username
        self.ImgData = ImgData

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.ProcessName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.ClassName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.DefaultTitle = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.ProcessPath = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.Username = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.ImgData = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SoftInfo')
        if self.ProcessName is not None:
            oprot.writeFieldBegin('ProcessName', TType.STRING, 1)
            oprot.writeString(self.ProcessName.encode('utf-8') if sys.version_info[0] == 2 else self.ProcessName)
            oprot.writeFieldEnd()
        if self.ClassName is not None:
            oprot.writeFieldBegin('ClassName', TType.STRING, 2)
            oprot.writeString(self.ClassName.encode('utf-8') if sys.version_info[0] == 2 else self.ClassName)
            oprot.writeFieldEnd()
        if self.DefaultTitle is not None:
            oprot.writeFieldBegin('DefaultTitle', TType.STRING, 3)
            oprot.writeString(self.DefaultTitle.encode('utf-8') if sys.version_info[0] == 2 else self.DefaultTitle)
            oprot.writeFieldEnd()
        if self.ProcessPath is not None:
            oprot.writeFieldBegin('ProcessPath', TType.STRING, 4)
            oprot.writeString(self.ProcessPath.encode('utf-8') if sys.version_info[0] == 2 else self.ProcessPath)
            oprot.writeFieldEnd()
        if self.Username is not None:
            oprot.writeFieldBegin('Username', TType.STRING, 5)
            oprot.writeString(self.Username.encode('utf-8') if sys.version_info[0] == 2 else self.Username)
            oprot.writeFieldEnd()
        if self.ImgData is not None:
            oprot.writeFieldBegin('ImgData', TType.STRING, 6)
            oprot.writeBinary(self.ImgData)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class YunClientShowInfo(object):
    """
    云客户端显示信息

    Attributes:
     - ID
     - ClientNum
     - OnlineState
     - ComputerName
     - ClientIPAddress
     - ClientMAC
     - LoginUser
     - LoginDomain
     - SafeState
     - ActivateCode
     - OrderID
     - Version
     - Note
     - Checked
     - RoomID
     - Group
     - RemoteScreenConnectString
     - PlatForm
     - PlatFormDesc
     - ActivateState

    """


    def __init__(self, ID=None, ClientNum=None, OnlineState=None, ComputerName=None, ClientIPAddress=None, ClientMAC=None, LoginUser=None, LoginDomain=None, SafeState=None, ActivateCode=None, OrderID=None, Version=None, Note=None, Checked=None, RoomID=None, Group=None, RemoteScreenConnectString=None, PlatForm=None, PlatFormDesc=None, ActivateState=None,):
        self.ID = ID
        self.ClientNum = ClientNum
        self.OnlineState = OnlineState
        self.ComputerName = ComputerName
        self.ClientIPAddress = ClientIPAddress
        self.ClientMAC = ClientMAC
        self.LoginUser = LoginUser
        self.LoginDomain = LoginDomain
        self.SafeState = SafeState
        self.ActivateCode = ActivateCode
        self.OrderID = OrderID
        self.Version = Version
        self.Note = Note
        self.Checked = Checked
        self.RoomID = RoomID
        self.Group = Group
        self.RemoteScreenConnectString = RemoteScreenConnectString
        self.PlatForm = PlatForm
        self.PlatFormDesc = PlatFormDesc
        self.ActivateState = ActivateState

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.ID = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.ClientNum = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.OnlineState = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.ComputerName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.ClientIPAddress = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.ClientMAC = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.LoginUser = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.LoginDomain = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.SafeState = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.ActivateCode = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.DOUBLE:
                    self.OrderID = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.Version = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRING:
                    self.Note = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.BOOL:
                    self.Checked = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.STRING:
                    self.RoomID = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.STRING:
                    self.Group = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.STRING:
                    self.RemoteScreenConnectString = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.I32:
                    self.PlatForm = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 19:
                if ftype == TType.STRING:
                    self.PlatFormDesc = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.STRING:
                    self.ActivateState = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('YunClientShowInfo')
        if self.ID is not None:
            oprot.writeFieldBegin('ID', TType.STRING, 1)
            oprot.writeString(self.ID.encode('utf-8') if sys.version_info[0] == 2 else self.ID)
            oprot.writeFieldEnd()
        if self.ClientNum is not None:
            oprot.writeFieldBegin('ClientNum', TType.STRING, 2)
            oprot.writeString(self.ClientNum.encode('utf-8') if sys.version_info[0] == 2 else self.ClientNum)
            oprot.writeFieldEnd()
        if self.OnlineState is not None:
            oprot.writeFieldBegin('OnlineState', TType.I32, 3)
            oprot.writeI32(self.OnlineState)
            oprot.writeFieldEnd()
        if self.ComputerName is not None:
            oprot.writeFieldBegin('ComputerName', TType.STRING, 4)
            oprot.writeString(self.ComputerName.encode('utf-8') if sys.version_info[0] == 2 else self.ComputerName)
            oprot.writeFieldEnd()
        if self.ClientIPAddress is not None:
            oprot.writeFieldBegin('ClientIPAddress', TType.STRING, 5)
            oprot.writeString(self.ClientIPAddress.encode('utf-8') if sys.version_info[0] == 2 else self.ClientIPAddress)
            oprot.writeFieldEnd()
        if self.ClientMAC is not None:
            oprot.writeFieldBegin('ClientMAC', TType.STRING, 6)
            oprot.writeString(self.ClientMAC.encode('utf-8') if sys.version_info[0] == 2 else self.ClientMAC)
            oprot.writeFieldEnd()
        if self.LoginUser is not None:
            oprot.writeFieldBegin('LoginUser', TType.STRING, 7)
            oprot.writeString(self.LoginUser.encode('utf-8') if sys.version_info[0] == 2 else self.LoginUser)
            oprot.writeFieldEnd()
        if self.LoginDomain is not None:
            oprot.writeFieldBegin('LoginDomain', TType.STRING, 8)
            oprot.writeString(self.LoginDomain.encode('utf-8') if sys.version_info[0] == 2 else self.LoginDomain)
            oprot.writeFieldEnd()
        if self.SafeState is not None:
            oprot.writeFieldBegin('SafeState', TType.STRING, 9)
            oprot.writeString(self.SafeState.encode('utf-8') if sys.version_info[0] == 2 else self.SafeState)
            oprot.writeFieldEnd()
        if self.ActivateCode is not None:
            oprot.writeFieldBegin('ActivateCode', TType.STRING, 10)
            oprot.writeString(self.ActivateCode.encode('utf-8') if sys.version_info[0] == 2 else self.ActivateCode)
            oprot.writeFieldEnd()
        if self.OrderID is not None:
            oprot.writeFieldBegin('OrderID', TType.DOUBLE, 11)
            oprot.writeDouble(self.OrderID)
            oprot.writeFieldEnd()
        if self.Version is not None:
            oprot.writeFieldBegin('Version', TType.STRING, 12)
            oprot.writeString(self.Version.encode('utf-8') if sys.version_info[0] == 2 else self.Version)
            oprot.writeFieldEnd()
        if self.Note is not None:
            oprot.writeFieldBegin('Note', TType.STRING, 13)
            oprot.writeString(self.Note.encode('utf-8') if sys.version_info[0] == 2 else self.Note)
            oprot.writeFieldEnd()
        if self.Checked is not None:
            oprot.writeFieldBegin('Checked', TType.BOOL, 14)
            oprot.writeBool(self.Checked)
            oprot.writeFieldEnd()
        if self.RoomID is not None:
            oprot.writeFieldBegin('RoomID', TType.STRING, 15)
            oprot.writeString(self.RoomID.encode('utf-8') if sys.version_info[0] == 2 else self.RoomID)
            oprot.writeFieldEnd()
        if self.Group is not None:
            oprot.writeFieldBegin('Group', TType.STRING, 16)
            oprot.writeString(self.Group.encode('utf-8') if sys.version_info[0] == 2 else self.Group)
            oprot.writeFieldEnd()
        if self.RemoteScreenConnectString is not None:
            oprot.writeFieldBegin('RemoteScreenConnectString', TType.STRING, 17)
            oprot.writeString(self.RemoteScreenConnectString.encode('utf-8') if sys.version_info[0] == 2 else self.RemoteScreenConnectString)
            oprot.writeFieldEnd()
        if self.PlatForm is not None:
            oprot.writeFieldBegin('PlatForm', TType.I32, 18)
            oprot.writeI32(self.PlatForm)
            oprot.writeFieldEnd()
        if self.PlatFormDesc is not None:
            oprot.writeFieldBegin('PlatFormDesc', TType.STRING, 19)
            oprot.writeString(self.PlatFormDesc.encode('utf-8') if sys.version_info[0] == 2 else self.PlatFormDesc)
            oprot.writeFieldEnd()
        if self.ActivateState is not None:
            oprot.writeFieldBegin('ActivateState', TType.STRING, 20)
            oprot.writeString(self.ActivateState.encode('utf-8') if sys.version_info[0] == 2 else self.ActivateState)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class CommandMsg(object):
    """
    服务器发送给客户端的命令

    Attributes:
     - Num
     - Body
     - BodyType
     - cmdstr
     - Version
     - BodyBytes
     - TotalPackets
     - From
     - Tos
     - IsNeedConfirm
     - ArgsDic
     - batch_num

    """


    def __init__(self, Num=0, Body=None, BodyType=None, cmdstr=None, Version=None, BodyBytes=None, TotalPackets=None, From=None, Tos=None, IsNeedConfirm=None, ArgsDic=None, batch_num=0,):
        self.Num = Num
        self.Body = Body
        self.BodyType = BodyType
        self.cmdstr = cmdstr
        self.Version = Version
        self.BodyBytes = BodyBytes
        self.TotalPackets = TotalPackets
        self.From = From
        self.Tos = Tos
        self.IsNeedConfirm = IsNeedConfirm
        self.ArgsDic = ArgsDic
        self.batch_num = batch_num

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.Num = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.Body = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.BodyType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.cmdstr = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.Version = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.BodyBytes = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I64:
                    self.TotalPackets = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.From = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.Tos = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.BOOL:
                    self.IsNeedConfirm = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.MAP:
                    self.ArgsDic = {}
                    (_ktype8, _vtype9, _size7) = iprot.readMapBegin()
                    for _i11 in range(_size7):
                        _key12 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val13 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.ArgsDic[_key12] = _val13
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.I64:
                    self.batch_num = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('CommandMsg')
        if self.Num is not None:
            oprot.writeFieldBegin('Num', TType.I64, 1)
            oprot.writeI64(self.Num)
            oprot.writeFieldEnd()
        if self.Body is not None:
            oprot.writeFieldBegin('Body', TType.STRING, 2)
            oprot.writeString(self.Body.encode('utf-8') if sys.version_info[0] == 2 else self.Body)
            oprot.writeFieldEnd()
        if self.BodyType is not None:
            oprot.writeFieldBegin('BodyType', TType.I32, 3)
            oprot.writeI32(self.BodyType)
            oprot.writeFieldEnd()
        if self.cmdstr is not None:
            oprot.writeFieldBegin('cmdstr', TType.STRING, 4)
            oprot.writeString(self.cmdstr.encode('utf-8') if sys.version_info[0] == 2 else self.cmdstr)
            oprot.writeFieldEnd()
        if self.Version is not None:
            oprot.writeFieldBegin('Version', TType.STRING, 5)
            oprot.writeString(self.Version.encode('utf-8') if sys.version_info[0] == 2 else self.Version)
            oprot.writeFieldEnd()
        if self.BodyBytes is not None:
            oprot.writeFieldBegin('BodyBytes', TType.STRING, 6)
            oprot.writeBinary(self.BodyBytes)
            oprot.writeFieldEnd()
        if self.TotalPackets is not None:
            oprot.writeFieldBegin('TotalPackets', TType.I64, 7)
            oprot.writeI64(self.TotalPackets)
            oprot.writeFieldEnd()
        if self.From is not None:
            oprot.writeFieldBegin('From', TType.STRING, 8)
            oprot.writeString(self.From.encode('utf-8') if sys.version_info[0] == 2 else self.From)
            oprot.writeFieldEnd()
        if self.Tos is not None:
            oprot.writeFieldBegin('Tos', TType.STRING, 9)
            oprot.writeString(self.Tos.encode('utf-8') if sys.version_info[0] == 2 else self.Tos)
            oprot.writeFieldEnd()
        if self.IsNeedConfirm is not None:
            oprot.writeFieldBegin('IsNeedConfirm', TType.BOOL, 10)
            oprot.writeBool(self.IsNeedConfirm)
            oprot.writeFieldEnd()
        if self.ArgsDic is not None:
            oprot.writeFieldBegin('ArgsDic', TType.MAP, 11)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.ArgsDic))
            for kiter14, viter15 in self.ArgsDic.items():
                oprot.writeString(kiter14.encode('utf-8') if sys.version_info[0] == 2 else kiter14)
                oprot.writeString(viter15.encode('utf-8') if sys.version_info[0] == 2 else viter15)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.batch_num is not None:
            oprot.writeFieldBegin('batch_num', TType.I64, 12)
            oprot.writeI64(self.batch_num)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(UserInfo)
UserInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'user_name', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'user_passwd', 'UTF8', None, ),  # 2
)
all_structs.append(IPInfo)
IPInfo.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'IsDhcp', None, None, ),  # 1
    (2, TType.STRING, 'Ip', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'Subnet', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'Gateway', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'Mac', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'DNS1', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'DNS2', 'UTF8', None, ),  # 7
)
all_structs.append(DesktopGroupInfo)
DesktopGroupInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'group_name', 'UTF8', None, ),  # 1
    (2, TType.I32, 'group_id', None, None, ),  # 2
    (3, TType.STRING, 'group_desc', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'group_uuid', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'os_type', 'UTF8', None, ),  # 5
)
all_structs.append(DesktopInfo)
DesktopInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'ip', 'UTF8', None, ),  # 1
    (2, TType.I32, 'port', None, None, ),  # 2
    (3, TType.STRING, 'desktop_name', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'token', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'dsk_type', 'UTF8', None, ),  # 5
    (6, TType.STRUCT, 'group', [DesktopGroupInfo, None], None, ),  # 6
    (7, TType.I32, 'status', None, None, ),  # 7
    (8, TType.STRING, 'os_type', 'UTF8', None, ),  # 8
    (9, TType.STRUCT, 'dsk_user', [UserInfo, None], None, ),  # 9
    (10, TType.STRING, 'dsk_uuid', 'UTF8', None, ),  # 10
)
all_structs.append(RespDesktopInfo)
RespDesktopInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'code', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'msg', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'description', 'UTF8', None, ),  # 3
    (4, TType.STRUCT, 'dsk_info', [DesktopInfo, None], None, ),  # 4
)
all_structs.append(TerminalDesktopInfo)
TerminalDesktopInfo.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'terminal_id', None, None, ),  # 1
    (2, TType.STRING, 'terminal_mac', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'terminal_ip', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'desktop_ip', 'UTF8', None, ),  # 4
)
all_structs.append(YunServerInfo)
YunServerInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'ServerUrl', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'ServerUrl1', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'UserName', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'UserPass', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'Domain', 'UTF8', None, ),  # 5
    (6, TType.I64, 'TimeOut', None, None, ),  # 6
)
all_structs.append(ScreenInfo)
ScreenInfo.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'Width', None, None, ),  # 1
    (2, TType.I32, 'Height', None, None, ),  # 2
)
all_structs.append(HardwareInfo)
HardwareInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'CpuID', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'HardDiskID', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'MacAddress', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'YunId', 'UTF8', None, ),  # 4
)
all_structs.append(RoomInfo)
RoomInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'RoomId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'Name', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'Des', 'UTF8', None, ),  # 3
    (4, TType.DOUBLE, 'OrderId', None, None, ),  # 4
    (5, TType.I32, 'SeatNum', None, None, ),  # 5
    (6, TType.STRING, 'Group', 'UTF8', None, ),  # 6
)
all_structs.append(RemoteDesktopInfo)
RemoteDesktopInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'MachineName', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'Domain', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'Uername', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'Pwd', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'DesktopName', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'SoftwareInfo', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'Domain0', 'UTF8', None, ),  # 7
    (8, TType.STRING, 'Uername0', 'UTF8', None, ),  # 8
    (9, TType.STRING, 'Pwd0', 'UTF8', None, ),  # 9
)
all_structs.append(ServiceInfo)
ServiceInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'Ip', 'UTF8', None, ),  # 1
    (2, TType.I32, 'Port', None, None, ),  # 2
)
all_structs.append(ScreenBroadCastInfo)
ScreenBroadCastInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'CastServicename', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'ScrCastChannel', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'ScrCastIp', 'UTF8', None, ),  # 3
    (4, TType.I32, 'ScrCastPort', None, None, ),  # 4
    (5, TType.I32, 'ScrCastQuality', None, None, ),  # 5
    (6, TType.I32, 'ScrCastRecvWinStyle', None, None, ),  # 6
    (7, TType.I32, 'ScrCastAllowRecord', None, None, ),  # 7
    (8, TType.I32, 'ScrCastSvrScreenRecord', None, None, ),  # 8
)
all_structs.append(VersionInfo)
VersionInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'ConfVersion', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'Version', 'UTF8', None, ),  # 2
)
all_structs.append(SystemTableInfo)
SystemTableInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'DesktopId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'SystemTabUid', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'TabDeskName', 'UTF8', None, ),  # 3
    (4, TType.I32, 'NeedNums', None, None, ),  # 4
    (5, TType.I32, 'ReadyNums', None, None, ),  # 5
    (6, TType.I32, 'LogonNums', None, None, ),  # 6
    (7, TType.BOOL, 'IsNeedSign', None, None, ),  # 7
    (8, TType.BOOL, 'AutoLogin', None, None, ),  # 8
    (9, TType.STRING, 'TabDateTime', 'UTF8', None, ),  # 9
    (10, TType.I64, 'AutoLoginDelaySecond', None, None, ),  # 10
    (11, TType.BOOL, 'TabIsReady', None, None, ),  # 11
    (12, TType.STRING, 'DeskDescription', 'UTF8', None, ),  # 12
    (13, TType.I32, 'RegisterCount', None, None, ),  # 13
    (14, TType.I32, 'UnRegisterCount', None, None, ),  # 14
    (15, TType.I32, 'OpenCount', None, None, ),  # 15
    (16, TType.I32, 'CloseCount', None, None, ),  # 16
    (17, TType.STRING, 'Status', 'UTF8', None, ),  # 17
    (18, TType.STRING, 'StatusName', 'UTF8', None, ),  # 18
    (19, TType.BOOL, 'Checked', None, None, ),  # 19
    (20, TType.BOOL, 'IsClassing', None, None, ),  # 20
    (21, TType.BOOL, 'IsReady', None, None, ),  # 21
)
all_structs.append(EduClientInfo)
EduClientInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'RoomName', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'Group', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'ProtectPass', 'UTF8', None, ),  # 3
    (4, TType.STRUCT, 'EduServiceInfo', [ServiceInfo, None], None, ),  # 4
    (5, TType.STRUCT, 'EduTopServiceInfo', [ServiceInfo, None], None, ),  # 5
    (6, TType.STRUCT, 'ClientServiceInfo', [ServiceInfo, None], None, ),  # 6
    (7, TType.STRING, 'SlientImagePath', 'UTF8', None, ),  # 7
    (8, TType.STRING, 'FileReceivePath', 'UTF8', None, ),  # 8
    (9, TType.I32, 'DisEnableNet', None, None, ),  # 9
    (10, TType.I32, 'Slient', None, None, ),  # 10
    (11, TType.I32, 'Casting', None, None, ),  # 11
    (12, TType.STRUCT, 'BroadCastInfo', [ScreenBroadCastInfo, None], None, ),  # 12
    (13, TType.STRUCT, 'EduVersionInfo', [VersionInfo, None], None, ),  # 13
    (14, TType.I32, 'UserType', None, None, ),  # 14
    (15, TType.I32, 'PlatForm', None, None, ),  # 15
    (16, TType.I32, 'DemoModing', None, None, ),  # 16
    (17, TType.I32, 'CutClassing', None, None, ),  # 17
    (18, TType.STRUCT, 'SysTableInfo', [SystemTableInfo, None], None, ),  # 18
    (19, TType.I32, 'Montioring', None, None, ),  # 19
)
all_structs.append(SitInfo)
SitInfo.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'Row', None, None, ),  # 1
    (2, TType.I32, 'Col', None, None, ),  # 2
    (3, TType.DOUBLE, 'RowId', None, None, ),  # 3
    (4, TType.STRING, 'Des', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'UserUuid', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'RoomId', 'UTF8', None, ),  # 6
)
all_structs.append(ClientInfo)
ClientInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'Num', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'HostName', 'UTF8', None, ),  # 2
    (3, TType.STRUCT, 'IPinfo', [IPInfo, None], None, ),  # 3
    (4, TType.STRUCT, 'Yuninfo', [YunServerInfo, None], None, ),  # 4
    None,  # 5
    (6, TType.STRUCT, 'Screeninfo', [ScreenInfo, None], None, ),  # 6
    (7, TType.I32, 'ShowLocalDesktop', None, None, ),  # 7
    (8, TType.STRING, 'AutoOpen', 'UTF8', None, ),  # 8
    (9, TType.STRING, 'ConfigPass', 'UTF8', None, ),  # 9
    (10, TType.STRING, 'MachineCode', 'UTF8', None, ),  # 10
    (11, TType.STRING, 'ActivateCode', 'UTF8', None, ),  # 11
    (12, TType.STRING, 'Activatestate', 'UTF8', None, ),  # 12
    (13, TType.STRING, 'Ewfstate', 'UTF8', None, ),  # 13
    (14, TType.STRING, 'version', 'UTF8', None, ),  # 14
    (15, TType.STRING, 'ConfVersion', 'UTF8', None, ),  # 15
    (16, TType.I64, 'ConfTime', None, None, ),  # 16
    (17, TType.I64, 'OverTime', None, None, ),  # 17
    (18, TType.STRUCT, 'HardInfo', [HardwareInfo, None], None, ),  # 18
    (19, TType.I32, 'ShowLoginPage', None, None, ),  # 19
    (20, TType.I32, 'ShowDesktopBootForm', None, None, ),  # 20
    (21, TType.I32, 'ShowDesktopDesc', None, None, ),  # 21
    (22, TType.STRUCT, 'roomoInfo', [RoomInfo, None], None, ),  # 22
    (23, TType.STRING, 'LocalPass', 'UTF8', None, ),  # 23
    (24, TType.I32, 'IdleTimeOut', None, None, ),  # 24
    (25, TType.I32, 'CloseWhileExitYunDesk', None, None, ),  # 25
    (26, TType.STRUCT, 'remoteDesktopInfo', [RemoteDesktopInfo, None], None, ),  # 26
    (27, TType.I32, 'usertype', None, None, ),  # 27
    (28, TType.I32, 'PlatForm', None, None, ),  # 28
    (29, TType.STRUCT, 'EduInfo', [EduClientInfo, None], None, ),  # 29
    (30, TType.STRUCT, 'ClientSitInfo', [SitInfo, None], None, ),  # 30
    (31, TType.STRUCT, 'TerminalConfInfo', [TerminalConf, None], None, ),  # 31
)
all_structs.append(DisconnectSetup)
DisconnectSetup.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'goto_local_desktop', None, None, ),  # 1
    (2, TType.BOOL, 'goto_local_auth', None, None, ),  # 2
)
all_structs.append(DisplaySetup)
DisplaySetup.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'show_local_button', None, None, ),  # 1
    (2, TType.STRING, 'goto_local_passwd', 'UTF8', None, ),  # 2
)
all_structs.append(TerminalConf)
TerminalConf.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'terminal_id', None, None, ),  # 1
    (2, TType.STRING, 'mac', 'UTF8', None, ),  # 2
    (3, TType.STRUCT, 'ip_info', [IPInfo, None], None, ),  # 3
    (4, TType.STRING, 'terminal_name', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'platform', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'soft_version', 'UTF8', None, ),  # 6
    (7, TType.I32, 'show_desktop_type', None, None, ),  # 7
    (8, TType.I32, 'auto_desktop', None, None, ),  # 8
    (9, TType.BOOL, 'close_desktop_strategy', None, None, ),  # 9
    (10, TType.BOOL, 'close_terminal_strategy', None, None, ),  # 10
    (11, TType.BOOL, 'open_strategy', None, None, ),  # 11
    (12, TType.STRUCT, 'server_info', [ServiceInfo, None], None, ),  # 12
    (13, TType.LIST, 'screen_info_list', (TType.STRUCT, [ScreenInfo, None], False), None, ),  # 13
    (14, TType.STRUCT, 'current_screen_info', [ScreenInfo, None], None, ),  # 14
    (15, TType.BOOL, 'show_modify_user_passwd', None, None, ),  # 15
    (16, TType.STRING, 'terminal_setup_passwd', 'UTF8', None, ),  # 16
    (17, TType.I64, 'conf_version', None, None, ),  # 17
    (18, TType.I32, 'window_mode', None, None, ),  # 18
    (19, TType.STRUCT, 'disconnect_setup', [DisconnectSetup, None], None, ),  # 19
    (20, TType.STRUCT, 'show', [DisplaySetup, None], None, ),  # 20
    (21, TType.BOOL, 'hide_tools', None, None, ),  # 21
    (22, TType.STRING, 'top_level_service_ip', 'UTF8', None, ),  # 22
    (23, TType.STRING, 'teacher_service_ip', 'UTF8', None, ),  # 23
    (24, TType.I32, 'classroom_num', None, None, ),  # 24
    (25, TType.STRING, 'multicast_ip', 'UTF8', None, ),  # 25
    (26, TType.I32, 'multicast_port', None, None, ),  # 26
)
all_structs.append(FileCtrlInfo)
FileCtrlInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'file_name', 'UTF8', None, ),  # 1
    (2, TType.I32, 'file_type', None, None, ),  # 2
    (3, TType.I64, 'total_size', None, None, ),  # 3
    (4, TType.I64, 'operate_offset', None, None, ),  # 4
    (5, TType.I32, 'operate_length', None, None, ),  # 5
)
all_structs.append(RouteInfo)
RouteInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'RouteId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'RouteAddress', 'UTF8', None, ),  # 2
    (3, TType.STRUCT, 'IPinfo', [IPInfo, None], None, ),  # 3
)
all_structs.append(ResultInfo)
ResultInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'code', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'Message', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'Description', 'UTF8', None, ),  # 3
)
all_structs.append(SoftInfo)
SoftInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'ProcessName', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'ClassName', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'DefaultTitle', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'ProcessPath', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'Username', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'ImgData', 'BINARY', None, ),  # 6
)
all_structs.append(YunClientShowInfo)
YunClientShowInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'ID', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'ClientNum', 'UTF8', None, ),  # 2
    (3, TType.I32, 'OnlineState', None, None, ),  # 3
    (4, TType.STRING, 'ComputerName', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'ClientIPAddress', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'ClientMAC', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'LoginUser', 'UTF8', None, ),  # 7
    (8, TType.STRING, 'LoginDomain', 'UTF8', None, ),  # 8
    (9, TType.STRING, 'SafeState', 'UTF8', None, ),  # 9
    (10, TType.STRING, 'ActivateCode', 'UTF8', None, ),  # 10
    (11, TType.DOUBLE, 'OrderID', None, None, ),  # 11
    (12, TType.STRING, 'Version', 'UTF8', None, ),  # 12
    (13, TType.STRING, 'Note', 'UTF8', None, ),  # 13
    (14, TType.BOOL, 'Checked', None, None, ),  # 14
    (15, TType.STRING, 'RoomID', 'UTF8', None, ),  # 15
    (16, TType.STRING, 'Group', 'UTF8', None, ),  # 16
    (17, TType.STRING, 'RemoteScreenConnectString', 'UTF8', None, ),  # 17
    (18, TType.I32, 'PlatForm', None, None, ),  # 18
    (19, TType.STRING, 'PlatFormDesc', 'UTF8', None, ),  # 19
    (20, TType.STRING, 'ActivateState', 'UTF8', None, ),  # 20
)
all_structs.append(CommandMsg)
CommandMsg.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'Num', None, 0, ),  # 1
    (2, TType.STRING, 'Body', 'UTF8', None, ),  # 2
    (3, TType.I32, 'BodyType', None, None, ),  # 3
    (4, TType.STRING, 'cmdstr', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'Version', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'BodyBytes', 'BINARY', None, ),  # 6
    (7, TType.I64, 'TotalPackets', None, None, ),  # 7
    (8, TType.STRING, 'From', 'UTF8', None, ),  # 8
    (9, TType.STRING, 'Tos', 'UTF8', None, ),  # 9
    (10, TType.BOOL, 'IsNeedConfirm', None, None, ),  # 10
    (11, TType.MAP, 'ArgsDic', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 11
    (12, TType.I64, 'batch_num', None, 0, ),  # 12
)
fix_spec(all_structs)
del all_structs
