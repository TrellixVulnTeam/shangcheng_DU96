#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import logging
from .ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
all_structs = []


class Iface(object):
    def Command(self, msg):
        """
        Parameters:
         - msg

        """
        pass

    def TokenId(self, tokenId):
        """
        Parameters:
         - tokenId

        """
        pass

    def RouteAddress(self, routeAddress):
        """
        Parameters:
         - routeAddress

        """
        pass

    def Ping(self, tokenId, Time):
        """
        Parameters:
         - tokenId
         - Time

        """
        pass

    def RouteAddressInfo(self, tokenId, routeInfo):
        """
        Parameters:
         - tokenId
         - routeInfo

        """
        pass


class Client(Iface):
    def __init__(self, iprot, oprot=None):
        self._iprot = self._oprot = iprot
        if oprot is not None:
            self._oprot = oprot
        self._seqid = 0

    def Command(self, msg):
        """
        Parameters:
         - msg

        """
        self.send_Command(msg)

    def send_Command(self, msg):
        self._oprot.writeMessageBegin('Command', TMessageType.ONEWAY, self._seqid)
        args = Command_args()
        args.msg = msg
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def TokenId(self, tokenId):
        """
        Parameters:
         - tokenId

        """
        self.send_TokenId(tokenId)

    def send_TokenId(self, tokenId):
        self._oprot.writeMessageBegin('TokenId', TMessageType.ONEWAY, self._seqid)
        args = TokenId_args()
        args.tokenId = tokenId
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def RouteAddress(self, routeAddress):
        """
        Parameters:
         - routeAddress

        """
        self.send_RouteAddress(routeAddress)

    def send_RouteAddress(self, routeAddress):
        self._oprot.writeMessageBegin('RouteAddress', TMessageType.ONEWAY, self._seqid)
        args = RouteAddress_args()
        args.routeAddress = routeAddress
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def Ping(self, tokenId, Time):
        """
        Parameters:
         - tokenId
         - Time

        """
        self.send_Ping(tokenId, Time)

    def send_Ping(self, tokenId, Time):
        self._oprot.writeMessageBegin('Ping', TMessageType.ONEWAY, self._seqid)
        args = Ping_args()
        args.tokenId = tokenId
        args.Time = Time
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def RouteAddressInfo(self, tokenId, routeInfo):
        """
        Parameters:
         - tokenId
         - routeInfo

        """
        self.send_RouteAddressInfo(tokenId, routeInfo)

    def send_RouteAddressInfo(self, tokenId, routeInfo):
        self._oprot.writeMessageBegin('RouteAddressInfo', TMessageType.ONEWAY, self._seqid)
        args = RouteAddressInfo_args()
        args.tokenId = tokenId
        args.routeInfo = routeInfo
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()


class Processor(Iface, TProcessor):
    def __init__(self, handler):
        self._handler = handler
        self._processMap = {}
        self._processMap["Command"] = Processor.process_Command
        self._processMap["TokenId"] = Processor.process_TokenId
        self._processMap["RouteAddress"] = Processor.process_RouteAddress
        self._processMap["Ping"] = Processor.process_Ping
        self._processMap["RouteAddressInfo"] = Processor.process_RouteAddressInfo
        self._on_message_begin = None

    def on_message_begin(self, func):
        self._on_message_begin = func

    def process(self, iprot, oprot):
        (name, type, seqid) = iprot.readMessageBegin()
        if self._on_message_begin:
            self._on_message_begin(name, type, seqid)
        if name not in self._processMap:
            iprot.skip(TType.STRUCT)
            iprot.readMessageEnd()
            x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
            oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
            x.write(oprot)
            oprot.writeMessageEnd()
            oprot.trans.flush()
            return
        else:
            self._processMap[name](self, seqid, iprot, oprot)
        return True

    def process_Command(self, seqid, iprot, oprot):
        args = Command_args()
        args.read(iprot)
        iprot.readMessageEnd()
        try:
            self._handler.Command(args.msg)
        except TTransport.TTransportException:
            raise
        except Exception:
            logging.exception('Exception in oneway handler')

    def process_TokenId(self, seqid, iprot, oprot):
        args = TokenId_args()
        args.read(iprot)
        iprot.readMessageEnd()
        try:
            self._handler.TokenId(args.tokenId)
        except TTransport.TTransportException:
            raise
        except Exception:
            logging.exception('Exception in oneway handler')

    def process_RouteAddress(self, seqid, iprot, oprot):
        args = RouteAddress_args()
        args.read(iprot)
        iprot.readMessageEnd()
        try:
            self._handler.RouteAddress(args.routeAddress)
        except TTransport.TTransportException:
            raise
        except Exception:
            logging.exception('Exception in oneway handler')

    def process_Ping(self, seqid, iprot, oprot):
        args = Ping_args()
        args.read(iprot)
        iprot.readMessageEnd()
        try:
            self._handler.Ping(args.tokenId, args.Time)
        except TTransport.TTransportException:
            raise
        except Exception:
            logging.exception('Exception in oneway handler')

    def process_RouteAddressInfo(self, seqid, iprot, oprot):
        args = RouteAddressInfo_args()
        args.read(iprot)
        iprot.readMessageEnd()
        try:
            self._handler.RouteAddressInfo(args.tokenId, args.routeInfo)
        except TTransport.TTransportException:
            raise
        except Exception:
            logging.exception('Exception in oneway handler')

# HELPER FUNCTIONS AND STRUCTURES


class Command_args(object):
    """
    Attributes:
     - msg

    """


    def __init__(self, msg=None,):
        self.msg = msg

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.msg = CommandMsg()
                    self.msg.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Command_args')
        if self.msg is not None:
            oprot.writeFieldBegin('msg', TType.STRUCT, 1)
            self.msg.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(Command_args)
Command_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'msg', [CommandMsg, None], None, ),  # 1
)


class TokenId_args(object):
    """
    Attributes:
     - tokenId

    """


    def __init__(self, tokenId=None,):
        self.tokenId = tokenId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.tokenId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TokenId_args')
        if self.tokenId is not None:
            oprot.writeFieldBegin('tokenId', TType.STRING, 1)
            oprot.writeString(self.tokenId.encode('utf-8') if sys.version_info[0] == 2 else self.tokenId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(TokenId_args)
TokenId_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'tokenId', 'UTF8', None, ),  # 1
)


class RouteAddress_args(object):
    """
    Attributes:
     - routeAddress

    """


    def __init__(self, routeAddress=None,):
        self.routeAddress = routeAddress

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.routeAddress = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('RouteAddress_args')
        if self.routeAddress is not None:
            oprot.writeFieldBegin('routeAddress', TType.STRING, 1)
            oprot.writeString(self.routeAddress.encode('utf-8') if sys.version_info[0] == 2 else self.routeAddress)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(RouteAddress_args)
RouteAddress_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'routeAddress', 'UTF8', None, ),  # 1
)


class Ping_args(object):
    """
    Attributes:
     - tokenId
     - Time

    """


    def __init__(self, tokenId=None, Time=None,):
        self.tokenId = tokenId
        self.Time = Time

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.tokenId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.Time = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Ping_args')
        if self.tokenId is not None:
            oprot.writeFieldBegin('tokenId', TType.STRING, 1)
            oprot.writeString(self.tokenId.encode('utf-8') if sys.version_info[0] == 2 else self.tokenId)
            oprot.writeFieldEnd()
        if self.Time is not None:
            oprot.writeFieldBegin('Time', TType.I64, 2)
            oprot.writeI64(self.Time)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(Ping_args)
Ping_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'tokenId', 'UTF8', None, ),  # 1
    (2, TType.I64, 'Time', None, None, ),  # 2
)


class RouteAddressInfo_args(object):
    """
    Attributes:
     - tokenId
     - routeInfo

    """


    def __init__(self, tokenId=None, routeInfo=None,):
        self.tokenId = tokenId
        self.routeInfo = routeInfo

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.tokenId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.routeInfo = RouteInfo()
                    self.routeInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('RouteAddressInfo_args')
        if self.tokenId is not None:
            oprot.writeFieldBegin('tokenId', TType.STRING, 1)
            oprot.writeString(self.tokenId.encode('utf-8') if sys.version_info[0] == 2 else self.tokenId)
            oprot.writeFieldEnd()
        if self.routeInfo is not None:
            oprot.writeFieldBegin('routeInfo', TType.STRUCT, 2)
            self.routeInfo.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(RouteAddressInfo_args)
RouteAddressInfo_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'tokenId', 'UTF8', None, ),  # 1
    (2, TType.STRUCT, 'routeInfo', [RouteInfo, None], None, ),  # 2
)
fix_spec(all_structs)
del all_structs

